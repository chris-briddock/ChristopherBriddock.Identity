{
  "README.html": {
    "href": "README.html",
    "title": "ChristopherBriddock.Service.Identity | ChristopherBriddock.Identity",
    "keywords": "ChristopherBriddock.Service.Identity Secure your app with our ASP.NET 8 Identity Service, featuring the OAuth 2.0 Resource Owner Password Credentials and Refresh token grant types for robust and flexible identity management. Table of Contents Introduction Planned Improvments User Functionality Technical Functionality Endpoints Getting Started License Introduction The Identity Service plays a crucial role in your application's security infrastructure, providing essential features for user authentication, authorization, and identity management. This README provides an overview of the service, libraries used, available endpoints, and instructions on getting started. Planned Improvements Multiple Tenants Multiple Client Applications FIDO2 Support Application based 2FA Codes Authorization Flows: Authorization Code Flow (with PKCE) Client Credentials Flow Device Authorization Flow (Device Grant) User Functionality Features Authorize Confirm Email Delete Account Logout Refresh Bearer Token Register Update Password Reset Password Update Email Address Two Step Verification Two Factor Recovery Codes Account Lockout on 3 retries, for 10 minutes. Technical Functionality Features RabbitMQ and Azure Service Bus support API Health Checks Secure JWT Bearer Authentication Azure Application Insights Monitoring Logging using Serilog (To Console Or To External Logging Server) e.g Seq or ElasticSearch Resilliant Microsoft SQL Server connections using Entity Framework Core Encrypted User Passwords Uses HTTP/3 and fallsback to HTTP/2 or HTTP/1.1 Endpoints /authorize: Endpoint for user authorization. /sendemail: Endpoint for sending token emails. /confirmemail: Endpoint for confirming user email. /forgotpassword: Endpoint for handling forgotten passwords. /logout: Endpoint for user logout. /refresh: Endpoint for refreshing authentication tokens. /register: Endpoint for user registration. /resetpassword: Endpoint for resetting user passwords. /token: Endpoint for token generation. /2fa/authorize: Endpoint for two-factor authentication authorization. /2fa/manage: Endpoint for managing two-factor authentication settings. /2fa/codes: Endpoint for generating and managing two-factor authentication codes. /2fa/redeem: Endpoint for reedming two-factor recovery codes. /account/email: Endpoint for managing user account email. /account/phonenumber: Endpoint for managing user account phone number. /account/password: Endpoint for managing user account password. /account/delete: Endpoint for deleting their user account. Getting Started To get started with the Identity Service, follow these steps: Clone the repository: git clone https://github.com/chris-briddock/ChristopherBriddock.Identity.git Open the solution. Ensure you have added migrations for the Service.Identity project with Entity Framework Core. Ensure you have an SQL Server database and RabbitMQ or Azure Service Bus available at minimum Optionally you can also use Seq, Azure Application Insights and Redis. Please configure all placeholder values in appsettings.json in both services. Build and run the Web API. Infrastructure as Code The project includes infrastructure as code (IaC) configurations for provisioning a Kubernetes cluster in three major cloud platforms - Azure, AWS, and Google Cloud. Below are the detailed instructions on how to provision infrastructure on each cloud provider. Azure The Azure cloud configuration can be found in the 'azure' directory. This uses Pulumi to define and provision Azure resources. To deploy a Kubernetes cluster in Azure: Navigate to the 'azure' directory. Install the necessary dependencies, you need to have Pulumi CLI and Node.js installed. Run pulumi stack init to create a new Pulumi stacking environment. Run pulumi config set azure:location <AzureRegion> to set your desired Azure region. Run pulumi up to provision the resources. AWS Amazon Web Services (AWS) configuration is located in the 'aws' directory. Follow the steps below: Navigate to the 'aws' directory. Make sure all the dependencies are installed and AWS credentials are properly set in your environment. Run pulumi stack init to create a new Pulumi stacking environment. Run pulumi up to start the provisioning of resources. Google Cloud The Google Cloud configuration can be found in the 'googlecloud' directory. Follow the steps below: Navigate to the 'googlecloud' directory. Run npm i to install dependencies. Run pulumi stack init to create a new Pulumi stacking environment. Run pulumi config set gcp:project <GoogleCloudProjectId> and pulumi config set gcp:region <GoogleCloudRegion> to set your Google Cloud project id and desired Google Cloud region. Install the Google Cloud CLI. Log in to Google Cloud. Run pulumi up to start the provisioning of resources. After executing these steps on your desired cloud platform, a Kubernetes cluster will be provisioned and ready-to-use. License This project is licensed under the See the LICENSE file for details."
  },
  "api/ChristopherBriddock.Service.Common.Constants.EmailPublisherConstants.html": {
    "href": "api/ChristopherBriddock.Service.Common.Constants.EmailPublisherConstants.html",
    "title": "Class EmailPublisherConstants | ChristopherBriddock.Identity",
    "keywords": "Class EmailPublisherConstants Namespace ChristopherBriddock.Service.Common.Constants Assembly ChristopherBriddock.Service.Common.dll Represents the types of email messages that can be sent from the application to the message queue. public static class EmailPublisherConstants Inheritance object EmailPublisherConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ConfirmEmail The value for a email confirmation message public const string ConfirmEmail = \"ConfirmEmail\" Field Value string ForgotPassword The value for a forogtten password message. public const string ForgotPassword = \"ForgotPassword\" Field Value string TwoFactorToken The value for a two factor token message. public const string TwoFactorToken = \"TwoFactorToken\" Field Value string"
  },
  "api/ChristopherBriddock.Service.Common.Constants.FeatureFlagConstants.html": {
    "href": "api/ChristopherBriddock.Service.Common.Constants.FeatureFlagConstants.html",
    "title": "Class FeatureFlagConstants | ChristopherBriddock.Identity",
    "keywords": "Class FeatureFlagConstants Namespace ChristopherBriddock.Service.Common.Constants Assembly ChristopherBriddock.Service.Common.dll Contains configuration definitions for features that can be disabled or enabled. public static class FeatureFlagConstants Inheritance object FeatureFlagConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AzApplicationInsights Gets or sets the boolean to enable or disable Azure Application Insights. public const string AzApplicationInsights = \"ApplicationInsights\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) AzServiceBus Gets or sets the boolean to enable or disable public const string AzServiceBus = \"ServiceBus\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) RabbitMq Gets or sets the boolean to enable or disable public const string RabbitMq = \"RabbitMq\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) Redis Gets or sets the boolean to enable or disable Redis caching. public const string Redis = \"Redis\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) Seq Gets or sets the boolean to enable or disable the external logging server. public const string Seq = \"Seq\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string)"
  },
  "api/ChristopherBriddock.Service.Common.Constants.html": {
    "href": "api/ChristopherBriddock.Service.Common.Constants.html",
    "title": "Namespace ChristopherBriddock.Service.Common.Constants | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Common.Constants Classes EmailPublisherConstants Represents the types of email messages that can be sent from the application to the message queue. FeatureFlagConstants Contains configuration definitions for features that can be disabled or enabled."
  },
  "api/ChristopherBriddock.Service.Common.Messaging.EmailMessage.html": {
    "href": "api/ChristopherBriddock.Service.Common.Messaging.EmailMessage.html",
    "title": "Class EmailMessage | ChristopherBriddock.Identity",
    "keywords": "Class EmailMessage Namespace ChristopherBriddock.Service.Common.Messaging Assembly ChristopherBriddock.Service.Common.dll Represent an message to be published to the message queue for emails. public sealed class EmailMessage Inheritance object EmailMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code The code for the user to enter sent via email. public string Code { get; set; } Property Value string EmailAddress The email address to which the email should be sent to. public string EmailAddress { get; set; } Property Value string Type The type of email to be sent to the message queue. EmailPublisherConstants public string Type { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Common.Messaging.html": {
    "href": "api/ChristopherBriddock.Service.Common.Messaging.html",
    "title": "Namespace ChristopherBriddock.Service.Common.Messaging | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Common.Messaging Classes EmailMessage Represent an message to be published to the message queue for emails."
  },
  "api/ChristopherBriddock.Service.Identity.Constants.CorsConstants.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Constants.CorsConstants.html",
    "title": "Class CorsConstants | ChristopherBriddock.Identity",
    "keywords": "Class CorsConstants Namespace ChristopherBriddock.Service.Identity.Constants Assembly ChristopherBriddock.Service.Identity.dll Defines the constant values relate to CORS. public static class CorsConstants Inheritance object CorsConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PolicyName The CORS policy name. public const string PolicyName = \"CorsPolicy\" Field Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Constants.RoleConstants.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Constants.RoleConstants.html",
    "title": "Class RoleConstants | ChristopherBriddock.Identity",
    "keywords": "Class RoleConstants Namespace ChristopherBriddock.Service.Identity.Constants Assembly ChristopherBriddock.Service.Identity.dll Constant values for roles available in the system by default. public static class RoleConstants Inheritance object RoleConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks These roles will be embedded in the user's JWT token, as a role claim. Fields Admin Represents the admin role. public const string Admin = \"Admin\" Field Value string Remarks The maximum amount of access. User Represents the user role. public const string User = \"User\" Field Value string Remarks The minimum amount of access."
  },
  "api/ChristopherBriddock.Service.Identity.Constants.TokenConstants.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Constants.TokenConstants.html",
    "title": "Class TokenConstants | ChristopherBriddock.Identity",
    "keywords": "Class TokenConstants Namespace ChristopherBriddock.Service.Identity.Constants Assembly ChristopherBriddock.Service.Identity.dll Constant values for different token types. public static class TokenConstants Inheritance object TokenConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ClientCredentials Represents the value for client credentials token type. public const string ClientCredentials = \"client_credentials\" Field Value string DeviceCode Represents the value for device code token type. public const string DeviceCode = \"device_code\" Field Value string ResourceOwner Represents the value for resource owner token type. public const string ResourceOwner = \"resource_owner\" Field Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Constants.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Constants.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Constants | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Constants Classes CorsConstants Defines the constant values relate to CORS. RoleConstants Constant values for roles available in the system by default. TokenConstants Constant values for different token types."
  },
  "api/ChristopherBriddock.Service.Identity.Data.AppDbContext.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Data.AppDbContext.html",
    "title": "Class AppDbContext | ChristopherBriddock.Identity",
    "keywords": "Class AppDbContext Namespace ChristopherBriddock.Service.Identity.Data Assembly ChristopherBriddock.Service.Identity.dll Represents a session with the database and can be used to query and save instances of your entities. public sealed class AppDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>> IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>> IdentityDbContext<ApplicationUser, ApplicationRole, Guid> AppDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.UserRoles IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.Roles IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.RoleClaims IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.Users IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserClaims IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserLogins IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserTokens DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.ToString() DbContext.Equals(object) DbContext.GetHashCode() DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AppDbContext(DbContextOptions, IConfiguration) Initializes a new instance of the AppDbContext class. public AppDbContext(DbContextOptions options, IConfiguration configuration) Parameters options DbContextOptions The options to be used by a DbContext. configuration IConfiguration The application configuration settings. Properties Configuration An instance of the application configuration. public IConfiguration Configuration { get; } Property Value IConfiguration Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples."
  },
  "api/ChristopherBriddock.Service.Identity.Data.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Data.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Data | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Data Classes AppDbContext Represents a session with the database and can be used to query and save instances of your entities."
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.AuthorizeEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.AuthorizeEndpoint.html",
    "title": "Class AuthorizeEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class AuthorizeEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint for authorizing a user. public sealed class AuthorizeEndpoint : EndpointBaseAsync.WithRequest<AuthorizeRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<AuthorizeRequest>.WithoutQuery.WithActionResult AuthorizeEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of AuthorizeEndpoint Constructors AuthorizeEndpoint(IServiceProvider, ILogger<AuthorizeEndpoint>) Exposes an endpoint for authorizing a user. public AuthorizeEndpoint(IServiceProvider serviceProvider, ILogger<AuthorizeEndpoint> logger) Parameters serviceProvider IServiceProvider The service provider. logger ILogger<AuthorizeEndpoint> The logger for this endpoint. Remarks Initializes a new instance of AuthorizeEndpoint Methods HandleAsync(AuthorizeRequest, CancellationToken) Allows a user to be authorized. [HttpPost(\"/authorize\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(401)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(AuthorizeRequest request, CancellationToken cancellationToken = default) Parameters request AuthorizeRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.ConfirmEmailEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.ConfirmEmailEndpoint.html",
    "title": "Class ConfirmEmailEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class ConfirmEmailEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll An endpoint which allows confirming the users email address. public sealed class ConfirmEmailEndpoint : EndpointBaseAsync.WithRequest<ConfirmEmailRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<ConfirmEmailRequest>.WithoutQuery.WithActionResult ConfirmEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializses a new instance of ConfirmEmailEndpoint Constructors ConfirmEmailEndpoint(IServiceProvider, ILogger<ConfirmEmailEndpoint>) An endpoint which allows confirming the users email address. public ConfirmEmailEndpoint(IServiceProvider serviceProvider, ILogger<ConfirmEmailEndpoint> logger) Parameters serviceProvider IServiceProvider The IServiceProvider logger ILogger<ConfirmEmailEndpoint> The logger for this endpoint. Remarks Initializses a new instance of ConfirmEmailEndpoint Methods HandleAsync(ConfirmEmailRequest, CancellationToken) Allows a user to confirm their email address. [HttpPost(\"/confirmemail\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(ConfirmEmailRequest request, CancellationToken cancellationToken = default) Parameters request ConfirmEmailRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.DeleteAccountEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.DeleteAccountEndpoint.html",
    "title": "Class DeleteAccountEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class DeleteAccountEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows the user to enable two factor. public class DeleteAccountEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult DeleteAccountEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of DeleteAccountEndpoint Constructors DeleteAccountEndpoint(ILogger<DeleteAccountEndpoint>, IServiceProvider) Exposes an endpoint that allows the user to enable two factor. public DeleteAccountEndpoint(ILogger<DeleteAccountEndpoint> logger, IServiceProvider serviceProvider) Parameters logger ILogger<DeleteAccountEndpoint> serviceProvider IServiceProvider Remarks Initializes a new instance of DeleteAccountEndpoint Properties Logger The application's logger. public ILogger<DeleteAccountEndpoint> Logger { get; } Property Value ILogger<DeleteAccountEndpoint> ServiceProvider The application's service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(CancellationToken) [HttpDelete(\"/account/delete\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ActionResult>"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.LogoutEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.LogoutEndpoint.html",
    "title": "Class LogoutEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class LogoutEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint for logging out. public sealed class LogoutEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult LogoutEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of LogoutEndpoint Constructors LogoutEndpoint(IServiceProvider, ILogger<LogoutEndpoint>) Exposes an endpoint for logging out. public LogoutEndpoint(IServiceProvider serviceProvider, ILogger<LogoutEndpoint> logger) Parameters serviceProvider IServiceProvider The application's service provider. logger ILogger<LogoutEndpoint> The application's logger. Remarks Initializes a new instance of LogoutEndpoint Properties Logger public ILogger<LogoutEndpoint> Logger { get; } Property Value ILogger<LogoutEndpoint> ServiceProvider public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(CancellationToken) Allows a user to sign out. [HttpPost(\"/logout\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.RefreshEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.RefreshEndpoint.html",
    "title": "Class RefreshEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class RefreshEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint so the user can refresh the bearer token. public class RefreshEndpoint : EndpointBaseAsync.WithRequest<RefreshRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<RefreshRequest>.WithoutQuery.WithActionResult RefreshEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of RefreshEndpoint Constructors RefreshEndpoint(IServiceProvider, ILogger<RefreshEndpoint>) Exposes an endpoint so the user can refresh the bearer token. public RefreshEndpoint(IServiceProvider serviceProvider, ILogger<RefreshEndpoint> logger) Parameters serviceProvider IServiceProvider The service provider. logger ILogger<RefreshEndpoint> The application's logger. Remarks Initializes a new instance of RefreshEndpoint Methods HandleAsync(RefreshRequest, CancellationToken) Allows a user to refresh the bearer token. [HttpPost(\"/refresh\")] [Authorize(AuthenticationSchemes = \"Bearer\")] public override Task<ActionResult> HandleAsync(RefreshRequest request, CancellationToken cancellationToken = default) Parameters request RefreshRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.RegisterEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.RegisterEndpoint.html",
    "title": "Class RegisterEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class RegisterEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows a user to register. public sealed class RegisterEndpoint : EndpointBaseAsync.WithRequest<RegisterRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<RegisterRequest>.WithoutQuery.WithActionResult RegisterEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of RegisterEndpoint Constructors RegisterEndpoint(IServiceProvider, ILogger<RegisterEndpoint>) Exposes an endpoint that allows a user to register. public RegisterEndpoint(IServiceProvider serviceProvider, ILogger<RegisterEndpoint> logger) Parameters serviceProvider IServiceProvider The application's service provider. logger ILogger<RegisterEndpoint> The application's logger. Remarks Initializes a new instance of RegisterEndpoint Properties Logger public ILogger<RegisterEndpoint> Logger { get; } Property Value ILogger<RegisterEndpoint> ServiceProvider public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(RegisterRequest, CancellationToken) Allows a user to register a new user. [HttpPost(\"/register\")] [AllowAnonymous] [ProducesResponseType(201)] [ProducesResponseType(409)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(RegisterRequest request, CancellationToken cancellationToken = default) Parameters request RegisterRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.ResetPasswordEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.ResetPasswordEndpoint.html",
    "title": "Class ResetPasswordEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class ResetPasswordEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow a user to reset their password. public sealed class ResetPasswordEndpoint : EndpointBaseAsync.WithRequest<ResetPasswordRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<ResetPasswordRequest>.WithoutQuery.WithActionResult ResetPasswordEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ResetPasswordEndpoint(IServiceProvider, ILogger<ResetPasswordEndpoint>) Exposes an endpoint to allow a user to reset their password. public ResetPasswordEndpoint(IServiceProvider serviceProvider, ILogger<ResetPasswordEndpoint> logger) Parameters serviceProvider IServiceProvider The application service provider. logger ILogger<ResetPasswordEndpoint> The logger. Methods HandleAsync(ResetPasswordRequest, CancellationToken) Allows a user to reset their password. [HttpPost(\"/resetpassword\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(ResetPasswordRequest request, CancellationToken cancellationToken = default) Parameters request ResetPasswordRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.SendTokenEmailEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.SendTokenEmailEndpoint.html",
    "title": "Class SendTokenEmailEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class SendTokenEmailEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint which sends a token via email. public sealed class SendTokenEmailEndpoint : EndpointBaseAsync.WithRequest<TokenEmailRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TokenEmailRequest>.WithoutQuery.WithActionResult SendTokenEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of SendTokenEmailEndpoint Constructors SendTokenEmailEndpoint(IServiceProvider, ILogger<SendTokenEmailEndpoint>) Exposes an endpoint which sends a token via email. public SendTokenEmailEndpoint(IServiceProvider serviceProvider, ILogger<SendTokenEmailEndpoint> logger) Parameters serviceProvider IServiceProvider The application service provider. logger ILogger<SendTokenEmailEndpoint> The application's logger. Remarks Initializes a new instance of SendTokenEmailEndpoint Properties Logger public ILogger<SendTokenEmailEndpoint> Logger { get; } Property Value ILogger<SendTokenEmailEndpoint> ServiceProvider The application service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(TokenEmailRequest, CancellationToken) Sends a token to the user by email. [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(404)] [ProducesResponseType(500)] [HttpPost(\"/sendemail\")] public override Task<ActionResult> HandleAsync(TokenEmailRequest request, CancellationToken cancellationToken = default) Parameters request TokenEmailRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TokenEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TokenEndpoint.html",
    "title": "Class TokenEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TokenEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to generate a token. public class TokenEndpoint : EndpointBaseAsync.WithRequest<TokenRequest>.WithoutQuery.WithActionResult<TokenResponse> Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TokenRequest>.WithoutQuery.WithActionResult<TokenResponse> TokenEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TokenEndpoint Constructors TokenEndpoint(IServiceProvider, ILogger<TokenEndpoint>) Exposes an endpoint to allow the user to generate a token. public TokenEndpoint(IServiceProvider serviceProvider, ILogger<TokenEndpoint> logger) Parameters serviceProvider IServiceProvider The application's service provider. logger ILogger<TokenEndpoint> The application logger. Remarks Initializes a new instance of TokenEndpoint Properties Logger public ILogger<TokenEndpoint> Logger { get; } Property Value ILogger<TokenEndpoint> ServiceProvider The service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(TokenRequest, CancellationToken) Allows a user to generate a Bearer token. [HttpGet(\"/token\")] [Authorize(AuthenticationSchemes = \"Identity.Application\", Policy = \"UserRolePolicy\")] [ProducesResponseType(200)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult<TokenResponse>> HandleAsync(TokenRequest request, CancellationToken cancellationToken = default) Parameters request TokenRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<TokenResponse>> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorAuthorizeEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorAuthorizeEndpoint.html",
    "title": "Class TwoFactorAuthorizeEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorAuthorizeEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows the user to sign in using two factor authentication. public sealed class TwoFactorAuthorizeEndpoint : EndpointBaseAsync.WithRequest<TwoFactorSignInRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TwoFactorSignInRequest>.WithoutQuery.WithActionResult TwoFactorAuthorizeEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TwoFactorAuthorizeEndpoint(IServiceProvider, ILogger<TwoFactorAuthorizeEndpoint>) Exposes an endpoint that allows the user to sign in using two factor authentication. public TwoFactorAuthorizeEndpoint(IServiceProvider serviceProvider, ILogger<TwoFactorAuthorizeEndpoint> logger) Parameters serviceProvider IServiceProvider logger ILogger<TwoFactorAuthorizeEndpoint> Properties Logger public ILogger<TwoFactorAuthorizeEndpoint> Logger { get; } Property Value ILogger<TwoFactorAuthorizeEndpoint> ServiceProvider The service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(TwoFactorSignInRequest, CancellationToken) Allows the user to sign in with two factor code. [HttpPost(\"/2fa/authorize\")] [Authorize(AuthenticationSchemes = \"Identity.Application\", Policy = \"UserRolePolicy\")] [ProducesResponseType(302)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(TwoFactorSignInRequest request, CancellationToken cancellationToken = default) Parameters request TwoFactorSignInRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorManageEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorManageEndpoint.html",
    "title": "Class TwoFactorManageEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorManageEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows the user to enable two factor. public sealed class TwoFactorManageEndpoint : EndpointBaseAsync.WithRequest<TwoFactorManageRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TwoFactorManageRequest>.WithoutQuery.WithActionResult TwoFactorManageEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TwoFactorManageEndpoint Constructors TwoFactorManageEndpoint(IServiceProvider, ILogger<TwoFactorManageEndpoint>) Exposes an endpoint that allows the user to enable two factor. public TwoFactorManageEndpoint(IServiceProvider serviceProvider, ILogger<TwoFactorManageEndpoint> logger) Parameters serviceProvider IServiceProvider The application's service provider. logger ILogger<TwoFactorManageEndpoint> The application's logger. Remarks Initializes a new instance of TwoFactorManageEndpoint Properties Logger public ILogger<TwoFactorManageEndpoint> Logger { get; } Property Value ILogger<TwoFactorManageEndpoint> ServiceProvider The service provider for the application. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(TwoFactorManageRequest, CancellationToken) Allows a user to enable two factor. [HttpPost(\"/2fa/manage\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(TwoFactorManageRequest request, CancellationToken cancellationToken = default) Parameters request TwoFactorManageRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesEndpoint.html",
    "title": "Class TwoFactorRecoveryCodesEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint which generates two factor recovery codes. public class TwoFactorRecoveryCodesEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult TwoFactorRecoveryCodesEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TwoFactorRecoveryCodesEndpoint Constructors TwoFactorRecoveryCodesEndpoint(IServiceProvider, ILogger<TwoFactorRecoveryCodesEndpoint>) Exposes an endpoint which generates two factor recovery codes. public TwoFactorRecoveryCodesEndpoint(IServiceProvider serviceProvider, ILogger<TwoFactorRecoveryCodesEndpoint> logger) Parameters serviceProvider IServiceProvider The application service provider. logger ILogger<TwoFactorRecoveryCodesEndpoint> The application's logger. Remarks Initializes a new instance of TwoFactorRecoveryCodesEndpoint Properties Logger public ILogger<TwoFactorRecoveryCodesEndpoint> Logger { get; } Property Value ILogger<TwoFactorRecoveryCodesEndpoint> ServiceProvider The application service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(CancellationToken) Allows a user to generate two factor recovery codes. [HttpGet(\"/2fa/codes\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesRedeemEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesRedeemEndpoint.html",
    "title": "Class TwoFactorRecoveryCodesRedeemEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesRedeemEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint for redeeming two factor recovery codes. public class TwoFactorRecoveryCodesRedeemEndpoint : EndpointBaseAsync.WithRequest<TwoFactorRecoveryCodesRedeemRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TwoFactorRecoveryCodesRedeemRequest>.WithoutQuery.WithActionResult TwoFactorRecoveryCodesRedeemEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TwoFactorRecoveryCodesRedeemEndpoint Constructors TwoFactorRecoveryCodesRedeemEndpoint(IServiceProvider, ILogger<TwoFactorRecoveryCodesEndpoint>) Exposes an endpoint for redeeming two factor recovery codes. public TwoFactorRecoveryCodesRedeemEndpoint(IServiceProvider serviceProvider, ILogger<TwoFactorRecoveryCodesEndpoint> logger) Parameters serviceProvider IServiceProvider The application service provider. logger ILogger<TwoFactorRecoveryCodesEndpoint> Rhe application's logger. Remarks Initializes a new instance of TwoFactorRecoveryCodesRedeemEndpoint Properties Logger public ILogger<TwoFactorRecoveryCodesEndpoint> Logger { get; } Property Value ILogger<TwoFactorRecoveryCodesEndpoint> ServiceProvider The application service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(TwoFactorRecoveryCodesRedeemRequest, CancellationToken) Allows a user to redeem two factor recovery codes. [HttpPost(\"/2fa/redeem\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(TwoFactorRecoveryCodesRedeemRequest request, CancellationToken cancellationToken = default) Parameters request TwoFactorRecoveryCodesRedeemRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.UpdateEmailEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.UpdateEmailEndpoint.html",
    "title": "Class UpdateEmailEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class UpdateEmailEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to update their email. public class UpdateEmailEndpoint : EndpointBaseAsync.WithRequest<UpdateEmailRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdateEmailRequest>.WithoutQuery.WithActionResult UpdateEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of UpdateEmailEndpoint Constructors UpdateEmailEndpoint(IServiceProvider, ILogger<UpdateEmailEndpoint>) Exposes an endpoint to allow the user to update their email. public UpdateEmailEndpoint(IServiceProvider serviceProvider, ILogger<UpdateEmailEndpoint> logger) Parameters serviceProvider IServiceProvider The application service provider. logger ILogger<UpdateEmailEndpoint> The application logger. Remarks Initializes a new instance of UpdateEmailEndpoint Properties Logger The application's logger. public ILogger<UpdateEmailEndpoint> Logger { get; } Property Value ILogger<UpdateEmailEndpoint> ServiceProvider The application service provider. public IServiceProvider ServiceProvider { get; set; } Property Value IServiceProvider Methods HandleAsync(UpdateEmailRequest, CancellationToken) Allows a user to update their email address. [HttpPut(\"/account/email\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(UpdateEmailRequest request, CancellationToken cancellationToken = default) Parameters request UpdateEmailRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePasswordEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePasswordEndpoint.html",
    "title": "Class UpdatePasswordEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePasswordEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to update their password. public class UpdatePasswordEndpoint : EndpointBaseAsync.WithRequest<UpdatePasswordRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdatePasswordRequest>.WithoutQuery.WithActionResult UpdatePasswordEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of UpdatePasswordEndpoint Constructors UpdatePasswordEndpoint(IServiceProvider, ILogger<UpdatePasswordEndpoint>) Exposes an endpoint to allow the user to update their password. public UpdatePasswordEndpoint(IServiceProvider serviceProvider, ILogger<UpdatePasswordEndpoint> logger) Parameters serviceProvider IServiceProvider The application service provider. logger ILogger<UpdatePasswordEndpoint> The logger. Remarks Initializes a new instance of UpdatePasswordEndpoint Properties Logger The application's logger. public ILogger<UpdatePasswordEndpoint> Logger { get; } Property Value ILogger<UpdatePasswordEndpoint> ServiceProvider The application service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(UpdatePasswordRequest, CancellationToken) Allows a user to update their password. [HttpPut(\"/account/password\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(UpdatePasswordRequest request, CancellationToken cancellationToken = default) Parameters request UpdatePasswordRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePhoneNumberEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePhoneNumberEndpoint.html",
    "title": "Class UpdatePhoneNumberEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePhoneNumberEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to update their phone number. public class UpdatePhoneNumberEndpoint : EndpointBaseAsync.WithRequest<UpdatePhoneNumberRequest>.WithoutQuery.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdatePhoneNumberRequest>.WithoutQuery.WithActionResult UpdatePhoneNumberEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of UpdatePhoneNumberEndpoint Constructors UpdatePhoneNumberEndpoint(IServiceProvider, ILogger<UpdatePhoneNumberEndpoint>) Exposes an endpoint to allow the user to update their phone number. public UpdatePhoneNumberEndpoint(IServiceProvider serviceProvider, ILogger<UpdatePhoneNumberEndpoint> logger) Parameters serviceProvider IServiceProvider The application service provider. logger ILogger<UpdatePhoneNumberEndpoint> The application logger. Remarks Initializes a new instance of UpdatePhoneNumberEndpoint Properties Logger The application logger. public ILogger<UpdatePhoneNumberEndpoint> Logger { get; } Property Value ILogger<UpdatePhoneNumberEndpoint> ServiceProvider The application service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods HandleAsync(UpdatePhoneNumberRequest, CancellationToken) Allows a user to update their phone number. [HttpPut(\"/account/phonenumber\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(UpdatePhoneNumberRequest request, CancellationToken cancellationToken = default) Parameters request UpdatePhoneNumberRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Endpoints | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Endpoints Classes AuthorizeEndpoint Exposes an endpoint for authorizing a user. ConfirmEmailEndpoint An endpoint which allows confirming the users email address. DeleteAccountEndpoint Exposes an endpoint that allows the user to enable two factor. LogoutEndpoint Exposes an endpoint for logging out. RefreshEndpoint Exposes an endpoint so the user can refresh the bearer token. RegisterEndpoint Exposes an endpoint that allows a user to register. ResetPasswordEndpoint Exposes an endpoint to allow a user to reset their password. SendTokenEmailEndpoint Exposes an endpoint which sends a token via email. TokenEndpoint Exposes an endpoint to allow the user to generate a token. TwoFactorAuthorizeEndpoint Exposes an endpoint that allows the user to sign in using two factor authentication. TwoFactorManageEndpoint Exposes an endpoint that allows the user to enable two factor. TwoFactorRecoveryCodesEndpoint Exposes an endpoint which generates two factor recovery codes. TwoFactorRecoveryCodesRedeemEndpoint Exposes an endpoint for redeeming two factor recovery codes. UpdateEmailEndpoint Exposes an endpoint to allow the user to update their email. UpdatePasswordEndpoint Exposes an endpoint to allow the user to update their password. UpdatePhoneNumberEndpoint Exposes an endpoint to allow the user to update their phone number."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.CreateJwtException.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.CreateJwtException.html",
    "title": "Class CreateJwtException | ChristopherBriddock.Identity",
    "keywords": "Class CreateJwtException Namespace ChristopherBriddock.Service.Identity.Exceptions Assembly ChristopherBriddock.Service.Identity.dll Exception class for errors related to creating JSON Web Tokens (JWT). [ExcludeFromCodeCoverage] public class CreateJwtException : Exception, ISerializable Inheritance object Exception CreateJwtException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CreateJwtException() Initializes a new instance of the CreateJwtException class. public CreateJwtException() CreateJwtException(string) Initializes a new instance of the CreateJwtException class with a specified error message. public CreateJwtException(string message) Parameters message string The error message that describes the exception. CreateJwtException(string, Exception) Initializes a new instance of the CreateJwtException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CreateJwtException(string message, Exception inner) Parameters message string The error message that describes the exception. inner Exception The inner exception that caused this exception."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.JwtSecretNullOrEmptyException.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.JwtSecretNullOrEmptyException.html",
    "title": "Class JwtSecretNullOrEmptyException | ChristopherBriddock.Identity",
    "keywords": "Class JwtSecretNullOrEmptyException Namespace ChristopherBriddock.Service.Identity.Exceptions Assembly ChristopherBriddock.Service.Identity.dll Exception class for errors related to the JWT secret being null or empty. [ExcludeFromCodeCoverage] public class JwtSecretNullOrEmptyException : Exception, ISerializable Inheritance object Exception JwtSecretNullOrEmptyException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JwtSecretNullOrEmptyException() Initializes a new instance of the JwtSecretNullOrEmptyException class. public JwtSecretNullOrEmptyException() JwtSecretNullOrEmptyException(string?) Initializes a new instance of the JwtSecretNullOrEmptyException class with a specified error message. public JwtSecretNullOrEmptyException(string? message) Parameters message string The error message that describes the exception. JwtSecretNullOrEmptyException(string?, Exception?) Initializes a new instance of the JwtSecretNullOrEmptyException class with a specified error message and a reference to the inner exception that is the cause of this exception. public JwtSecretNullOrEmptyException(string? message, Exception? innerException) Parameters message string The error message that describes the exception. innerException Exception The inner exception that caused this exception."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.ValidateJwtException.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.ValidateJwtException.html",
    "title": "Class ValidateJwtException | ChristopherBriddock.Identity",
    "keywords": "Class ValidateJwtException Namespace ChristopherBriddock.Service.Identity.Exceptions Assembly ChristopherBriddock.Service.Identity.dll Exception class for errors related to validating JSON Web Tokens (JWT). [ExcludeFromCodeCoverage] public class ValidateJwtException : Exception, ISerializable Inheritance object Exception ValidateJwtException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ValidateJwtException() Initializes a new instance of the ValidateJwtException class. public ValidateJwtException() ValidateJwtException(string) Initializes a new instance of the ValidateJwtException class with a specified error message. public ValidateJwtException(string message) Parameters message string The error message that describes the exception. ValidateJwtException(string, Exception) Initializes a new instance of the ValidateJwtException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ValidateJwtException(string message, Exception inner) Parameters message string The error message that describes the exception. inner Exception The inner exception that caused this exception."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Exceptions | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Exceptions Classes CreateJwtException Exception class for errors related to creating JSON Web Tokens (JWT). JwtSecretNullOrEmptyException Exception class for errors related to the JWT secret being null or empty. ValidateJwtException Exception class for errors related to validating JSON Web Tokens (JWT)."
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.HealthCheckExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.HealthCheckExtensions.html",
    "title": "Class HealthCheckExtensions | ChristopherBriddock.Identity",
    "keywords": "Class HealthCheckExtensions Namespace ChristopherBriddock.Service.Identity.Extensions Assembly ChristopherBriddock.Service.Identity.dll Health check related extension methods. public static class HealthCheckExtensions Inheritance object HealthCheckExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAzureApplicationInsightsHealthChecks(IServiceCollection) Adds health checks for vital infrastructure such as Databases, Caches and Logging. public static IServiceCollection AddAzureApplicationInsightsHealthChecks(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to healh checks will be added. Returns IServiceCollection The modified IServiceCollection instance. AddSeqHealthCheckPublisher(IServiceCollection) Adds health check publishing to Seq. public static IServiceCollection AddSeqHealthCheckPublisher(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to health checks will be added. Returns IServiceCollection The modified IServiceCollection instance."
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | ChristopherBriddock.Identity",
    "keywords": "Class ServiceCollectionExtensions Namespace ChristopherBriddock.Service.Identity.Extensions Assembly ChristopherBriddock.Service.Identity.dll Extension methods for the IServiceCollection public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAppRateLimiting(IServiceCollection) Adds fixed window rate limiting. public static IServiceCollection AddAppRateLimiting(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddAppSession(IServiceCollection) Adds session support to the application. public static IServiceCollection AddAppSession(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddAuthorizationPolicy(IServiceCollection) Adds custom authorization policy. public static IServiceCollection AddAuthorizationPolicy(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddAzureAppInsights(IServiceCollection) Adds Azure Application Insights, if enabled. public static IServiceCollection AddAzureAppInsights(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddBearerAuthentication(IServiceCollection) Extension method for adding authentication services to the IServiceCollection. public static IServiceCollection AddBearerAuthentication(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddCorsPolicy(IServiceCollection) Add cross origin policy. public static IServiceCollection AddCorsPolicy(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. Remarks This is only enabled in development, by the middleware UseCors(IApplicationBuilder) AddIdentity(IServiceCollection) Adds the ASP.NET Identity configuration. public static IServiceCollection AddIdentity(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection instance. Returns IServiceCollection The modified IServiceCollection instance. AddPublisherMessaging(IServiceCollection) Adds publisher messaging for rabbitmq or azure service bus. public static IServiceCollection AddPublisherMessaging(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddSessionCache(IServiceCollection) Add the required services for in-memory and redis services, if redis is enabled in the feature flags. public static IServiceCollection AddSessionCache(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance."
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.WebApplicationExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.WebApplicationExtensions.html",
    "title": "Class WebApplicationExtensions | ChristopherBriddock.Identity",
    "keywords": "Class WebApplicationExtensions Namespace ChristopherBriddock.Service.Identity.Extensions Assembly ChristopherBriddock.Service.Identity.dll Extensions for IApplicationBuilder public static class WebApplicationExtensions Inheritance object WebApplicationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SeedDataAsync(WebApplication) Seeds data asynchronously. public static Task SeedDataAsync(this WebApplication app) Parameters app WebApplication The web application. Returns Task A Task representing the asynchronous operation. SeedTestDataAsync(WebApplication) Seeds all test data asynchronously public static Task SeedTestDataAsync(this WebApplication app) Parameters app WebApplication The web application. Returns Task A Task representing the asynchronous operation."
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Extensions | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Extensions Classes HealthCheckExtensions Health check related extension methods. ServiceCollectionExtensions Extension methods for the IServiceCollection WebApplicationExtensions Extensions for IApplicationBuilder"
  },
  "api/ChristopherBriddock.Service.Identity.Migrations.AuditableEntities.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Migrations.AuditableEntities.html",
    "title": "Class AuditableEntities | ChristopherBriddock.Identity",
    "keywords": "Class AuditableEntities Namespace ChristopherBriddock.Service.Identity.Migrations Assembly ChristopherBriddock.Service.Identity.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20240623150802_AuditableEntities\")] public class AuditableEntities : Migration Inheritance object Migration AuditableEntities Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/ChristopherBriddock.Service.Identity.Migrations.Initial.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Migrations.Initial.html",
    "title": "Class Initial | ChristopherBriddock.Identity",
    "keywords": "Class Initial Namespace ChristopherBriddock.Service.Identity.Migrations Assembly ChristopherBriddock.Service.Identity.dll A base class inherited by each EF Core migration. [ExcludeFromCodeCoverage] [DbContext(typeof(AppDbContext))] [Migration(\"20240620144837_Initial\")] public class Initial : Migration Inheritance object Migration Initial Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/ChristopherBriddock.Service.Identity.Migrations.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Migrations.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Migrations | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Migrations Classes AuditableEntities A base class inherited by each EF Core migration. Initial A base class inherited by each EF Core migration."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationRole.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationRole.html",
    "title": "Class ApplicationRole | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationRole Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Represents a role in the identity system public sealed class ApplicationRole : IdentityRole<Guid>, IAuditableEntity Inheritance object IdentityRole<Guid> ApplicationRole Implements IAuditableEntity Inherited Members IdentityRole<Guid>.ToString() IdentityRole<Guid>.Name IdentityRole<Guid>.NormalizedName IdentityRole<Guid>.ConcurrencyStamp object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties CreatedBy Represents who modified the user. public Guid? CreatedBy { get; set; } Property Value Guid? CreatedOnUtc Represents the created date and time for an auditable entity. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Represents who deleted the user. public Guid? DeletedBy { get; set; } Property Value Guid? DeletedOnUtc Represents the delete date and time for an auditable entity. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? Id Gets or sets the primary key for this role. [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public override Guid Id { get; set; } Property Value Guid IsDeleted Represents the deleted flag for an auditable entity. public bool IsDeleted { get; set; } Property Value bool ModifiedBy Represents who modified the user. public Guid? ModifiedBy { get; set; } Property Value Guid? ModifiedOnUtc Represents the modified date and time for an auditable entity. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationRoleClaim.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationRoleClaim.html",
    "title": "Class ApplicationRoleClaim | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationRoleClaim Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Represents a claim that is granted to all users within a role. public sealed class ApplicationRoleClaim : IdentityRoleClaim<Guid>, IAuditableEntity Inheritance object IdentityRoleClaim<Guid> ApplicationRoleClaim Implements IAuditableEntity Inherited Members IdentityRoleClaim<Guid>.ToClaim() IdentityRoleClaim<Guid>.InitializeFromClaim(Claim) IdentityRoleClaim<Guid>.Id IdentityRoleClaim<Guid>.RoleId IdentityRoleClaim<Guid>.ClaimType IdentityRoleClaim<Guid>.ClaimValue object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CreatedBy Represents who modified the user. public Guid? CreatedBy { get; set; } Property Value Guid? CreatedOnUtc Represents the created date and time for an auditable entity. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Represents who deleted the user. public Guid? DeletedBy { get; set; } Property Value Guid? DeletedOnUtc Represents the delete date and time for an auditable entity. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? IsDeleted Represents the deleted flag for an auditable entity. public bool IsDeleted { get; set; } Property Value bool ModifiedBy Represents who modified the user. public Guid? ModifiedBy { get; set; } Property Value Guid? ModifiedOnUtc Represents the modified date and time for an auditable entity. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUser.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUser.html",
    "title": "Class ApplicationUser | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUser Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Represents a user in the identity system public sealed class ApplicationUser : IdentityUser<Guid>, IAuditableEntity Inheritance object IdentityUser<Guid> ApplicationUser Implements IAuditableEntity Inherited Members IdentityUser<Guid>.ToString() IdentityUser<Guid>.UserName IdentityUser<Guid>.NormalizedUserName IdentityUser<Guid>.Email IdentityUser<Guid>.NormalizedEmail IdentityUser<Guid>.EmailConfirmed IdentityUser<Guid>.PasswordHash IdentityUser<Guid>.SecurityStamp IdentityUser<Guid>.ConcurrencyStamp IdentityUser<Guid>.PhoneNumber IdentityUser<Guid>.PhoneNumberConfirmed IdentityUser<Guid>.TwoFactorEnabled IdentityUser<Guid>.LockoutEnd IdentityUser<Guid>.LockoutEnabled IdentityUser<Guid>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties CreatedBy Represents who modified the user. public Guid? CreatedBy { get; set; } Property Value Guid? CreatedOnUtc Represents the created date and time for an auditable entity. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Represents who deleted the user. public Guid? DeletedBy { get; set; } Property Value Guid? DeletedOnUtc Represents the delete date and time for an auditable entity. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? Id Gets or sets the primary key for this user. [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public override Guid Id { get; set; } Property Value Guid IsDeleted Represents the deleted flag for an auditable entity. public bool IsDeleted { get; set; } Property Value bool ModifiedBy Represents who modified the user. public Guid? ModifiedBy { get; set; } Property Value Guid? ModifiedOnUtc Represents the modified date and time for an auditable entity. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserClaims.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserClaims.html",
    "title": "Class ApplicationUserClaims | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserClaims Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Represents a claim that a user possesses. public sealed class ApplicationUserClaims : IdentityUserClaim<Guid>, IAuditableEntity Inheritance object IdentityUserClaim<Guid> ApplicationUserClaims Implements IAuditableEntity Inherited Members IdentityUserClaim<Guid>.ToClaim() IdentityUserClaim<Guid>.InitializeFromClaim(Claim) IdentityUserClaim<Guid>.Id IdentityUserClaim<Guid>.UserId IdentityUserClaim<Guid>.ClaimType IdentityUserClaim<Guid>.ClaimValue object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CreatedBy Represents who modified the user. public Guid? CreatedBy { get; set; } Property Value Guid? CreatedOnUtc Represents the created date and time for an auditable entity. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Represents who deleted the user. public Guid? DeletedBy { get; set; } Property Value Guid? DeletedOnUtc Represents the delete date and time for an auditable entity. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? IsDeleted Represents the deleted flag for an auditable entity. public bool IsDeleted { get; set; } Property Value bool ModifiedBy Represents who modified the user. public Guid? ModifiedBy { get; set; } Property Value Guid? ModifiedOnUtc Represents the modified date and time for an auditable entity. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserLogin.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserLogin.html",
    "title": "Class ApplicationUserLogin | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserLogin Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Represents a login and its associated provider for a user. public sealed class ApplicationUserLogin : IdentityUserLogin<Guid>, IAuditableEntity Inheritance object IdentityUserLogin<Guid> ApplicationUserLogin Implements IAuditableEntity Inherited Members IdentityUserLogin<Guid>.LoginProvider IdentityUserLogin<Guid>.ProviderKey IdentityUserLogin<Guid>.ProviderDisplayName IdentityUserLogin<Guid>.UserId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CreatedBy Represents who modified the user. public Guid? CreatedBy { get; set; } Property Value Guid? CreatedOnUtc Represents the created date and time for an auditable entity. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Represents who deleted the user. public Guid? DeletedBy { get; set; } Property Value Guid? DeletedOnUtc Represents the delete date and time for an auditable entity. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? IsDeleted Represents the deleted flag for an auditable entity. public bool IsDeleted { get; set; } Property Value bool ModifiedBy Represents who modified the user. public Guid? ModifiedBy { get; set; } Property Value Guid? ModifiedOnUtc Represents the modified date and time for an auditable entity. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserRole.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserRole.html",
    "title": "Class ApplicationUserRole | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserRole Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Represents the link between a user and a role. public sealed class ApplicationUserRole : IdentityUserRole<Guid> Inheritance object IdentityUserRole<Guid> ApplicationUserRole Inherited Members IdentityUserRole<Guid>.UserId IdentityUserRole<Guid>.RoleId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserToken.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.ApplicationUserToken.html",
    "title": "Class ApplicationUserToken | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserToken Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Represents an authentication token for a user. public sealed class ApplicationUserToken : IdentityUserToken<Guid>, IAuditableEntity Inheritance object IdentityUserToken<Guid> ApplicationUserToken Implements IAuditableEntity Inherited Members IdentityUserToken<Guid>.UserId IdentityUserToken<Guid>.LoginProvider IdentityUserToken<Guid>.Name IdentityUserToken<Guid>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CreatedBy Represents who modified the user. public Guid? CreatedBy { get; set; } Property Value Guid? CreatedOnUtc Represents the created date and time for an auditable entity. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Represents who deleted the user. public Guid? DeletedBy { get; set; } Property Value Guid? DeletedOnUtc Represents the delete date and time for an auditable entity. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? IsDeleted Represents the deleted flag for an auditable entity. public bool IsDeleted { get; set; } Property Value bool ModifiedBy Represents who modified the user. public Guid? ModifiedBy { get; set; } Property Value Guid? ModifiedOnUtc Represents the modified date and time for an auditable entity. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.IAuditableEntity.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.IAuditableEntity.html",
    "title": "Interface IAuditableEntity | ChristopherBriddock.Identity",
    "keywords": "Interface IAuditableEntity Namespace ChristopherBriddock.Service.Identity.Models.Entities Assembly ChristopherBriddock.Service.Identity.dll Defines a contract for auditable entities. public interface IAuditableEntity Properties CreatedBy Represents who modified the user. Guid? CreatedBy { get; set; } Property Value Guid? CreatedOnUtc Represents the created date and time for an auditable entity. DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Represents who deleted the user. Guid? DeletedBy { get; set; } Property Value Guid? DeletedOnUtc Represents the delete date and time for an auditable entity. DateTime? DeletedOnUtc { get; set; } Property Value DateTime? IsDeleted Represents the deleted flag for an auditable entity. bool IsDeleted { get; set; } Property Value bool ModifiedBy Represents who modified the user. Guid? ModifiedBy { get; set; } Property Value Guid? ModifiedOnUtc Represents the modified date and time for an auditable entity. DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Entities.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Entities.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models.Entities | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models.Entities Classes ApplicationRole Represents a role in the identity system ApplicationRoleClaim Represents a claim that is granted to all users within a role. ApplicationUser Represents a user in the identity system ApplicationUserClaims Represents a claim that a user possesses. ApplicationUserLogin Represents a login and its associated provider for a user. ApplicationUserRole Represents the link between a user and a role. ApplicationUserToken Represents an authentication token for a user. Interfaces IAuditableEntity Defines a contract for auditable entities."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.AuthorizeRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.AuthorizeRequest.html",
    "title": "Class AuthorizeRequest | ChristopherBriddock.Identity",
    "keywords": "Class AuthorizeRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a request for authorization. public sealed record AuthorizeRequest : IEquatable<AuthorizeRequest> Inheritance object AuthorizeRequest Implements IEquatable<AuthorizeRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress Gets or sets the email address associated with the user. public required string EmailAddress { get; set; } Property Value string Remarks This field is required for user identification. Password Gets or sets the password associated with the user. public required string Password { get; set; } Property Value string Remarks This field is required for user authentication. RememberMe Gets or sets a value indicating whether the user's session should be remembered. public required bool RememberMe { get; set; } Property Value bool Remarks Setting this to true will remember the user's session across browser sessions."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.ConfirmEmailRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.ConfirmEmailRequest.html",
    "title": "Class ConfirmEmailRequest | ChristopherBriddock.Identity",
    "keywords": "Class ConfirmEmailRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents an email confirmation. public sealed record ConfirmEmailRequest : IEquatable<ConfirmEmailRequest> Inheritance object ConfirmEmailRequest Implements IEquatable<ConfirmEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code The code to confirm the email address [FromQuery(Name = \"code\")] public required string Code { get; set; } Property Value string EmailAddress The users email address [FromQuery(Name = \"email_address\")] public required string EmailAddress { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.RefreshRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.RefreshRequest.html",
    "title": "Class RefreshRequest | ChristopherBriddock.Identity",
    "keywords": "Class RefreshRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a refresh request. public sealed record RefreshRequest : IEquatable<RefreshRequest> Inheritance object RefreshRequest Implements IEquatable<RefreshRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties RefreshToken The refresh token. public required string RefreshToken { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.RegisterRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.RegisterRequest.html",
    "title": "Class RegisterRequest | ChristopherBriddock.Identity",
    "keywords": "Class RegisterRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a user registering for the application. public sealed record RegisterRequest : IEquatable<RegisterRequest> Inheritance object RegisterRequest Implements IEquatable<RegisterRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress The user's email address. public required string EmailAddress { get; set; } Property Value string Password The user's password. public required string Password { get; set; } Property Value string PhoneNumber The user's phone number. public required string PhoneNumber { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TokenEmailRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TokenEmailRequest.html",
    "title": "Class TokenEmailRequest | ChristopherBriddock.Identity",
    "keywords": "Class TokenEmailRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a token email request. public sealed record TokenEmailRequest : IEquatable<TokenEmailRequest> Inheritance object TokenEmailRequest Implements IEquatable<TokenEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress The user's email address. public string EmailAddress { get; set; } Property Value string TokenType The type of token to be generated. public string TokenType { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TokenRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TokenRequest.html",
    "title": "Class TokenRequest | ChristopherBriddock.Identity",
    "keywords": "Class TokenRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a token request, for a specific token type. public sealed record TokenRequest : IEquatable<TokenRequest> Inheritance object TokenRequest Implements IEquatable<TokenRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties TokenType The token type requested. [FromQuery(Name = \"token_type\")] public string TokenType { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorManageRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorManageRequest.html",
    "title": "Class TwoFactorManageRequest | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorManageRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represent a users two factor request to enable or disable the feature. public sealed record TwoFactorManageRequest : IEquatable<TwoFactorManageRequest> Inheritance object TwoFactorManageRequest Implements IEquatable<TwoFactorManageRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsEnabled Gets or sets the isEnabled flag. [FromQuery(Name = \"is_enabled\")] public bool IsEnabled { get; set; } Property Value bool"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorRecoveryCodesRedeemRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorRecoveryCodesRedeemRequest.html",
    "title": "Class TwoFactorRecoveryCodesRedeemRequest | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesRedeemRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a two factor recovery code redeem request. public sealed record TwoFactorRecoveryCodesRedeemRequest : IEquatable<TwoFactorRecoveryCodesRedeemRequest> Inheritance object TwoFactorRecoveryCodesRedeemRequest Implements IEquatable<TwoFactorRecoveryCodesRedeemRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code Gets or sets the recovery code. public required string Code { get; set; } Property Value string EmailAddress Gets or sets the user email address which the recovery code is used for. public required string EmailAddress { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorSignInRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorSignInRequest.html",
    "title": "Class TwoFactorSignInRequest | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorSignInRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a two factor sign in request. public sealed record TwoFactorSignInRequest : IEquatable<TwoFactorSignInRequest> Inheritance object TwoFactorSignInRequest Implements IEquatable<TwoFactorSignInRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress Gets or sets the email address public string EmailAddress { get; set; } Property Value string Token The two factor token public string Token { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdateEmailRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdateEmailRequest.html",
    "title": "Class UpdateEmailRequest | ChristopherBriddock.Identity",
    "keywords": "Class UpdateEmailRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a user email request. public sealed record UpdateEmailRequest : IEquatable<UpdateEmailRequest> Inheritance object UpdateEmailRequest Implements IEquatable<UpdateEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress The new email address. public string EmailAddress { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePasswordRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePasswordRequest.html",
    "title": "Class UpdatePasswordRequest | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePasswordRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a password update request. public sealed record UpdatePasswordRequest : IEquatable<UpdatePasswordRequest> Inheritance object UpdatePasswordRequest Implements IEquatable<UpdatePasswordRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CurrentPassword The user's current password. public required string CurrentPassword { get; set; } Property Value string NewPassword The user's new password. public required string NewPassword { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePhoneNumberRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePhoneNumberRequest.html",
    "title": "Class UpdatePhoneNumberRequest | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePhoneNumberRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a user's phone number, which is to be updated. public sealed record UpdatePhoneNumberRequest : IEquatable<UpdatePhoneNumberRequest> Inheritance object UpdatePhoneNumberRequest Implements IEquatable<UpdatePhoneNumberRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties PhoneNumber The new phone number. public string PhoneNumber { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models.Requests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models.Requests Classes AuthorizeRequest Represents a request for authorization. ConfirmEmailRequest Represents an email confirmation. RefreshRequest Represents a refresh request. RegisterRequest Represents a user registering for the application. TokenEmailRequest Represents a token email request. TokenRequest Represents a token request, for a specific token type. TwoFactorManageRequest Represent a users two factor request to enable or disable the feature. TwoFactorRecoveryCodesRedeemRequest Represents a two factor recovery code redeem request. TwoFactorSignInRequest Represents a two factor sign in request. UpdateEmailRequest Represents a user email request. UpdatePasswordRequest Represents a password update request. UpdatePhoneNumberRequest Represents a user's phone number, which is to be updated."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Responses.TokenResponse.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Responses.TokenResponse.html",
    "title": "Class TokenResponse | ChristopherBriddock.Identity",
    "keywords": "Class TokenResponse Namespace ChristopherBriddock.Service.Identity.Models.Responses Assembly ChristopherBriddock.Service.Identity.dll Represents the response when a user is authorized. public sealed record TokenResponse : IEquatable<TokenResponse> Inheritance object TokenResponse Implements IEquatable<TokenResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken Gets or sets the access token. public required string AccessToken { get; set; } Property Value string Expires Gets or sets the expiration of the token. public required string Expires { get; set; } Property Value string RefreshToken Gets or sets the refresh token. public required string RefreshToken { get; set; } Property Value string TokenType Gets or sets the token type. public required string TokenType { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Responses.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Responses.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models.Responses | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models.Responses Classes TokenResponse Represents the response when a user is authorized."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Results.JwtResult.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Results.JwtResult.html",
    "title": "Class JwtResult | ChristopherBriddock.Identity",
    "keywords": "Class JwtResult Namespace ChristopherBriddock.Service.Identity.Models.Results Assembly ChristopherBriddock.Service.Identity.dll Represents the result of a JWT (JSON Web Token) operation. public sealed class JwtResult Inheritance object JwtResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Error Gets or sets an optional error message in case the JWT operation encountered an error. public string? Error { get; set; } Property Value string Success Gets or sets a value indicating whether the JWT operation was successful. public bool Success { get; set; } Property Value bool Token Gets or sets the JWT (JSON Web Token) string if the operation was successful. public string Token { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Results.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Results.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models.Results | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models.Results Classes JwtResult Represents the result of a JWT (JSON Web Token) operation."
  },
  "api/ChristopherBriddock.Service.Identity.Program.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Program.html",
    "title": "Class Program | ChristopherBriddock.Identity",
    "keywords": "Class Program Namespace ChristopherBriddock.Service.Identity Assembly ChristopherBriddock.Service.Identity.dll The entry point for the Web Application. public sealed class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Providers.IJsonWebTokenProvider.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Providers.IJsonWebTokenProvider.html",
    "title": "Interface IJsonWebTokenProvider | ChristopherBriddock.Identity",
    "keywords": "Interface IJsonWebTokenProvider Namespace ChristopherBriddock.Service.Identity.Providers Assembly ChristopherBriddock.Service.Identity.dll Provides a contract for the JWT Token Provider implementation JsonWebTokenProvider public interface IJsonWebTokenProvider Methods TryCreateRefreshTokenAsync(string, string, string, string, string, string) Tries to create a refresh JWT (JSON Web Token) asynchronously. Task<JwtResult> TryCreateRefreshTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires string The expiration date and time of the JWT. subject string The subject of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryCreateTokenAsync(string, string, string, string, string, string) Tries to create a new JWT (JSON Web Token) asynchronously. Task<JwtResult> TryCreateTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string jwtSecret string issuer string audience string expires string subject string Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryValidateTokenAsync(string, string, string, string) Tries to validate a JWT (JSON Web Token) asynchronously. Task<JwtResult> TryValidateTokenAsync(string token, string jwtSecret, string issuer, string audience) Parameters token string The JWT to validate. jwtSecret string The secret key used to validate the JWT's signature. issuer string The expected issuer of the JWT. audience string The expected audience of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token validation."
  },
  "api/ChristopherBriddock.Service.Identity.Providers.JsonWebTokenProvider.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Providers.JsonWebTokenProvider.html",
    "title": "Class JsonWebTokenProvider | ChristopherBriddock.Identity",
    "keywords": "Class JsonWebTokenProvider Namespace ChristopherBriddock.Service.Identity.Providers Assembly ChristopherBriddock.Service.Identity.dll Represents a service for managing JSON Web Tokens. This includes creating, refreshing and validating JSON Web Tokens. public class JsonWebTokenProvider : IJsonWebTokenProvider Inheritance object JsonWebTokenProvider Implements IJsonWebTokenProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryCreateRefreshTokenAsync(string, string, string, string, string, string) Tries to create a new refresh JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryCreateRefreshTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string jwtSecret string issuer string audience string expires string subject string Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryCreateTokenAsync(string, string, string, string, string, string) Tries to create a JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryCreateTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires string The expiration date and time of the JWT. subject string The subject of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryValidateTokenAsync(string, string, string, string) Tries to validate a JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryValidateTokenAsync(string token, string jwtSecret, string issuer, string audience) Parameters token string The JWT to validate. jwtSecret string The secret key used to validate the JWT's signature. issuer string The expected issuer of the JWT. audience string The expected audience of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token validation."
  },
  "api/ChristopherBriddock.Service.Identity.Providers.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Providers.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Providers | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Providers Classes JsonWebTokenProvider Represents a service for managing JSON Web Tokens. This includes creating, refreshing and validating JSON Web Tokens. Interfaces IJsonWebTokenProvider Provides a contract for the JWT Token Provider implementation JsonWebTokenProvider"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.EmailPublisher.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.EmailPublisher.html",
    "title": "Class EmailPublisher | ChristopherBriddock.Identity",
    "keywords": "Class EmailPublisher Namespace ChristopherBriddock.Service.Identity.Publishers Assembly ChristopherBriddock.Service.Identity.dll Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. public sealed class EmailPublisher : IEmailPublisher Inheritance object EmailPublisher Implements IEmailPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initalizes a new instance of EmailPublisher Constructors EmailPublisher(IServiceProvider) Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. public EmailPublisher(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Remarks Initalizes a new instance of EmailPublisher Properties ServiceProvider The application's service provider public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. public Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.IEmailPublisher.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.IEmailPublisher.html",
    "title": "Interface IEmailPublisher | ChristopherBriddock.Identity",
    "keywords": "Interface IEmailPublisher Namespace ChristopherBriddock.Service.Identity.Publishers Assembly ChristopherBriddock.Service.Identity.dll Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. public interface IEmailPublisher Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.NullEmailPublisher.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.NullEmailPublisher.html",
    "title": "Class NullEmailPublisher | ChristopherBriddock.Identity",
    "keywords": "Class NullEmailPublisher Namespace ChristopherBriddock.Service.Identity.Publishers Assembly ChristopherBriddock.Service.Identity.dll This is a null implementation of IEmailPublisher Allows for the system to be tested without needing a message queue available. This will mean that the system will no longer be able to send emails for registration confirmation, two factor authentication and forgot password, but this is only when the Feature Flag for RabbitMq or Azure Service Bus is disabled. public class NullEmailPublisher : IEmailPublisher Inheritance object NullEmailPublisher Implements IEmailPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. [ExcludeFromCodeCoverage] public Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Publishers | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Publishers Classes EmailPublisher Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. NullEmailPublisher This is a null implementation of IEmailPublisher Allows for the system to be tested without needing a message queue available. This will mean that the system will no longer be able to send emails for registration confirmation, two factor authentication and forgot password, but this is only when the Feature Flag for RabbitMq or Azure Service Bus is disabled. Interfaces IEmailPublisher Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes."
  },
  "api/ChristopherBriddock.Service.Identity.Seed.Test.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Seed.Test.html",
    "title": "Class Seed.Test | ChristopherBriddock.Identity",
    "keywords": "Class Seed.Test Namespace ChristopherBriddock.Service.Identity Assembly ChristopherBriddock.Service.Identity.dll Seeds all test user data. public static class Seed.Test Inheritance object Seed.Test Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SeedAuthorizeUser(WebApplication) Seeds a user into the database if it doesn't already exist for testing the authorize endpoint. public static Task SeedAuthorizeUser(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedBackgroundServiceUsers(WebApplication) Seeds two test users into the database if it doesn't already exist for testing public static Task SeedBackgroundServiceUsers(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedDeletedUser(WebApplication) Seeds an deleted user into the database if it doesn't already exist. public static Task SeedDeletedUser(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedTwoFactorUser(WebApplication) Seeds a user into the database if it doesn't already exist for testing the authorize endpoint. public static Task SeedTwoFactorUser(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation."
  },
  "api/ChristopherBriddock.Service.Identity.Seed.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Seed.html",
    "title": "Class Seed | ChristopherBriddock.Identity",
    "keywords": "Class Seed Namespace ChristopherBriddock.Service.Identity Assembly ChristopherBriddock.Service.Identity.dll Provides methods for seeding initial data into the application database. public static class Seed Inheritance object Seed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SeedAdminUserAsync(WebApplication) Seeds an admin user into the database if it doesn't already exist. public static Task SeedAdminUserAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedRolesAsync(WebApplication) Seeds roles into the database if they don't already exist. public static Task SeedRolesAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation."
  },
  "api/ChristopherBriddock.Service.Identity.Services.AccountPurgeBackgroundService.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Services.AccountPurgeBackgroundService.html",
    "title": "Class AccountPurgeBackgroundService | ChristopherBriddock.Identity",
    "keywords": "Class AccountPurgeBackgroundService Namespace ChristopherBriddock.Service.Identity.Services Assembly ChristopherBriddock.Service.Identity.dll This backround service deletes old user account marked as deleted after seven years. public class AccountPurgeBackgroundService : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService AccountPurgeBackgroundService Implements IHostedService IDisposable Derived AccountPurgeBackgroundServiceExposeProtected Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of AccountPurgeBackgroundService Constructors AccountPurgeBackgroundService(IServiceScopeFactory, ILogger<AccountPurgeBackgroundService>) This backround service deletes old user account marked as deleted after seven years. public AccountPurgeBackgroundService(IServiceScopeFactory serviceScopeFactory, ILogger<AccountPurgeBackgroundService> logger) Parameters serviceScopeFactory IServiceScopeFactory A factory for creating instances of IServiceScope logger ILogger<AccountPurgeBackgroundService> The application logger. Remarks Initializes a new instance of AccountPurgeBackgroundService Properties Logger The application logger. public ILogger<AccountPurgeBackgroundService> Logger { get; } Property Value ILogger<AccountPurgeBackgroundService> ServiceScopeFactory A factory for creating instances of IServiceScope public IServiceScopeFactory ServiceScopeFactory { get; } Property Value IServiceScopeFactory Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/ChristopherBriddock.Service.Identity.Services.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Services.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Services | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Services Classes AccountPurgeBackgroundService This backround service deletes old user account marked as deleted after seven years."
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AccountPurgeBackgroundServiceExposeProtected.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AccountPurgeBackgroundServiceExposeProtected.html",
    "title": "Class AccountPurgeBackgroundServiceExposeProtected | ChristopherBriddock.Identity",
    "keywords": "Class AccountPurgeBackgroundServiceExposeProtected Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class AccountPurgeBackgroundServiceExposeProtected : AccountPurgeBackgroundService, IHostedService, IDisposable Inheritance object BackgroundService AccountPurgeBackgroundService AccountPurgeBackgroundServiceExposeProtected Implements IHostedService IDisposable Inherited Members AccountPurgeBackgroundService.ServiceScopeFactory AccountPurgeBackgroundService.Logger AccountPurgeBackgroundService.ExecuteAsync(CancellationToken) BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountPurgeBackgroundServiceExposeProtected(IServiceScopeFactory, ILogger<AccountPurgeBackgroundService>) public AccountPurgeBackgroundServiceExposeProtected(IServiceScopeFactory serviceScopeFactory, ILogger<AccountPurgeBackgroundService> logger) Parameters serviceScopeFactory IServiceScopeFactory logger ILogger<AccountPurgeBackgroundService> Methods ExecuteTaskAsync(CancellationToken) public Task ExecuteTaskAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AccountPurgeBackgroundServiceTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AccountPurgeBackgroundServiceTests.html",
    "title": "Class AccountPurgeBackgroundServiceTests | ChristopherBriddock.Identity",
    "keywords": "Class AccountPurgeBackgroundServiceTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class AccountPurgeBackgroundServiceTests Inheritance object AccountPurgeBackgroundServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountPurgeBackgroundServiceTests() public AccountPurgeBackgroundServiceTests() Methods ExecuteAsync_DeletesOldUserAccountsAfterSevenYears() [Test] public Task ExecuteAsync_DeletesOldUserAccountsAfterSevenYears() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AuthorizeEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AuthorizeEndpointTests.html",
    "title": "Class AuthorizeEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class AuthorizeEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class AuthorizeEndpointTests Inheritance object AuthorizeEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AuthorizeEndpoint_ReturnsStatus200OK_WhenTwoFactorIsEnabled() [Test] public Task AuthorizeEndpoint_ReturnsStatus200OK_WhenTwoFactorIsEnabled() Returns Task AuthorizeEndpoint_ReturnsStatus302Found_WhenValidCredentialsAreUsed() [Test] public Task AuthorizeEndpoint_ReturnsStatus302Found_WhenValidCredentialsAreUsed() Returns Task AuthorizeEndpoint_ReturnsStatus401Unauthorized_WhenUseInvalidValidCredentials() [Test] public Task AuthorizeEndpoint_ReturnsStatus401Unauthorized_WhenUseInvalidValidCredentials() Returns Task AuthorizeEndpoint_ReturnsStatus401Unauthorized_WhenUserIsDeleted() [Test] public Task AuthorizeEndpoint_ReturnsStatus401Unauthorized_WhenUserIsDeleted() Returns Task AuthorizeEndpoint_ReturnsStatus500InternalServerError_WhenExceptionIsThrown() [Test] public Task AuthorizeEndpoint_ReturnsStatus500InternalServerError_WhenExceptionIsThrown() Returns Task OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ConfirmEmailEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ConfirmEmailEndpointTests.html",
    "title": "Class ConfirmEmailEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class ConfirmEmailEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class ConfirmEmailEndpointTests Inheritance object ConfirmEmailEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfirmEmailEndpoint_ReturnsStatus200OK_WithValidRequest() [Test] public Task ConfirmEmailEndpoint_ReturnsStatus200OK_WithValidRequest() Returns Task ConfirmEmailEndpoint_ReturnsStatus500_WhenUserIsNotFound() [Test] public Task ConfirmEmailEndpoint_ReturnsStatus500_WhenUserIsNotFound() Returns Task ConfirmEmailEndpoint_ReturnsStatus500_WithInvalidRequest() [Test] public Task ConfirmEmailEndpoint_ReturnsStatus500_WithInvalidRequest() Returns Task OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.CustomWebApplicationFactory-1.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.CustomWebApplicationFactory-1.html",
    "title": "Class CustomWebApplicationFactory<TProgram> | ChristopherBriddock.Identity",
    "keywords": "Class CustomWebApplicationFactory<TProgram> Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class CustomWebApplicationFactory<TProgram> : WebApplicationFactory<TProgram>, IDisposable, IAsyncDisposable where TProgram : class Type Parameters TProgram Inheritance object WebApplicationFactory<TProgram> CustomWebApplicationFactory<TProgram> Implements IDisposable IAsyncDisposable Inherited Members WebApplicationFactory<TProgram>.WithWebHostBuilder(Action<IWebHostBuilder>) WebApplicationFactory<TProgram>.GetTestAssemblies() WebApplicationFactory<TProgram>.CreateHostBuilder() WebApplicationFactory<TProgram>.CreateWebHostBuilder() WebApplicationFactory<TProgram>.CreateServer(IWebHostBuilder) WebApplicationFactory<TProgram>.CreateHost(IHostBuilder) WebApplicationFactory<TProgram>.CreateClient() WebApplicationFactory<TProgram>.CreateClient(WebApplicationFactoryClientOptions) WebApplicationFactory<TProgram>.CreateDefaultClient(params DelegatingHandler[]) WebApplicationFactory<TProgram>.CreateDefaultClient(Uri, params DelegatingHandler[]) WebApplicationFactory<TProgram>.Dispose() WebApplicationFactory<TProgram>.Dispose(bool) WebApplicationFactory<TProgram>.DisposeAsync() WebApplicationFactory<TProgram>.Server WebApplicationFactory<TProgram>.Services WebApplicationFactory<TProgram>.Factories WebApplicationFactory<TProgram>.ClientOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields _loggingContainer public IContainer _loggingContainer Field Value IContainer _messagingContainer public IContainer _messagingContainer Field Value IContainer _msSqlContainer public MsSqlContainer _msSqlContainer Field Value MsSqlContainer _redisCacheContainer public IContainer _redisCacheContainer Field Value IContainer Methods ConfigureClient(HttpClient) Configures HttpClient instances created by this WebApplicationFactory<TEntryPoint>. protected override void ConfigureClient(HttpClient client) Parameters client HttpClient The HttpClient instance getting configured. ConfigureWebHost(IWebHostBuilder) Gives a fixture an opportunity to configure the application before it gets built. protected override void ConfigureWebHost(IWebHostBuilder builder) Parameters builder IWebHostBuilder The IWebHostBuilder for the application. StartTestContainer() public void StartTestContainer() StopTestContainer() public void StopTestContainer()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.DeleteAccountEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.DeleteAccountEndpointTests.html",
    "title": "Class DeleteAccountEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class DeleteAccountEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class DeleteAccountEndpointTests Inheritance object DeleteAccountEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteAccountEndpoint_Returns204NoContent_WhenAccountIsDeleted() [Test] public Task DeleteAccountEndpoint_Returns204NoContent_WhenAccountIsDeleted() Returns Task DeleteAccountEndpoint_Returns401_WhenUserIsUnauthorized() [Test] public Task DeleteAccountEndpoint_Returns401_WhenUserIsUnauthorized() Returns Task DeleteAccountEndpoint_Returns500_WhenExceptionIsThrown() [Test] public Task DeleteAccountEndpoint_Returns500_WhenExceptionIsThrown() Returns Task DeleteAccountEndpoint_Returns500_WhenUserIsNotFound() [Test] public Task DeleteAccountEndpoint_Returns500_WhenUserIsNotFound() Returns Task OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.LogoutEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.LogoutEndpointTests.html",
    "title": "Class LogoutEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class LogoutEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class LogoutEndpointTests Inheritance object LogoutEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LogoutEndpoint_Returns204NoContent_WhenUserLogsOutSuccessfully() [Test] public Task LogoutEndpoint_Returns204NoContent_WhenUserLogsOutSuccessfully() Returns Task LogoutEndpoint_Returns401Unauthorized_WhenNotLoggedIn() [Test] public Task LogoutEndpoint_Returns401Unauthorized_WhenNotLoggedIn() Returns Task LogoutEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task LogoutEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RefreshEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RefreshEndpointTests.html",
    "title": "Class RefreshEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class RefreshEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class RefreshEndpointTests Inheritance object RefreshEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() RefreshEndpoint_Returns302Found_WhenRefreshIsSuccessful() [Test] public Task RefreshEndpoint_Returns302Found_WhenRefreshIsSuccessful() Returns Task RefreshEndpoint_Returns401Unauthorized_WhenTokenValidationFails() [Test] public Task RefreshEndpoint_Returns401Unauthorized_WhenTokenValidationFails() Returns Task RefreshEndpoint_Returns401_WhenInvalidTokenIsUsed() [Test] public Task RefreshEndpoint_Returns401_WhenInvalidTokenIsUsed() Returns Task RefreshEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task RefreshEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RegisterEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RegisterEndpointTests.html",
    "title": "Class RegisterEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class RegisterEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class RegisterEndpointTests Inheritance object RegisterEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() RegisterEndpoint_Returns201Created_WhenUserIsCreated() [Test] public Task RegisterEndpoint_Returns201Created_WhenUserIsCreated() Returns Task RegisterEndpoint_Returns409Conflict_WhenUserAlreadyExists() [Test] public Task RegisterEndpoint_Returns409Conflict_WhenUserAlreadyExists() Returns Task RegisterEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task RegisterEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ResetPasswordEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ResetPasswordEndpointTests.html",
    "title": "Class ResetPasswordEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class ResetPasswordEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class ResetPasswordEndpointTests Inheritance object ResetPasswordEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() ResetEndpoint_ReturnsStatus204_WhenResetIsSuccessful() [Test] public Task ResetEndpoint_ReturnsStatus204_WhenResetIsSuccessful() Returns Task ResetEndpoint_ReturnsStatus500_WhenExceptionIsThrown() [Test] public Task ResetEndpoint_ReturnsStatus500_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.SendTokenEmailEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.SendTokenEmailEndpointTests.html",
    "title": "Class SendTokenEmailEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class SendTokenEmailEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class SendTokenEmailEndpointTests Inheritance object SendTokenEmailEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetTokenType() public static IEnumerable<object[]> GetTokenType() Returns IEnumerable<object[]> OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() SendTokenEmailEndpoint_ReturnsStatus200OK_WhenRequestIsValid(string) [Test] [TestCaseSource(\"GetTokenType\")] public Task SendTokenEmailEndpoint_ReturnsStatus200OK_WhenRequestIsValid(string tokenType) Parameters tokenType string Returns Task SendTokenEmailEndpoint_ReturnsStatus400BadRequest_WhenNoEmailAddressPassed() [Test] public Task SendTokenEmailEndpoint_ReturnsStatus400BadRequest_WhenNoEmailAddressPassed() Returns Task SendTokenEmailEndpoint_ReturnsStatus404NotFound_WhenEmailAddressIsInvalid() [Test] public Task SendTokenEmailEndpoint_ReturnsStatus404NotFound_WhenEmailAddressIsInvalid() Returns Task SendTokenEmailEndpoint_ReturnsStatus500InternalServerError_WhenAnExceptionIsThrown() [Test] public Task SendTokenEmailEndpoint_ReturnsStatus500InternalServerError_WhenAnExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TestFixture-1.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TestFixture-1.html",
    "title": "Class TestFixture<TProgram> | ChristopherBriddock.Identity",
    "keywords": "Class TestFixture<TProgram> Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class TestFixture<TProgram> : IDisposable where TProgram : class Type Parameters TProgram Inheritance object TestFixture<TProgram> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken public string AccessToken { get; } Property Value string WebApplicationFactory public CustomWebApplicationFactory<TProgram> WebApplicationFactory { get; set; } Property Value CustomWebApplicationFactory<TProgram> Methods CreateAuthenticatedClient(Action<IServiceCollection>) public HttpClient CreateAuthenticatedClient(Action<IServiceCollection> configureServices = null) Parameters configureServices Action<IServiceCollection> Returns HttpClient Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TokenEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TokenEndpointTests.html",
    "title": "Class TokenEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class TokenEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class TokenEndpointTests Inheritance object TokenEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() TokenEndpoint_Returns200OK_WithTokenResponse() [Test] public Task TokenEndpoint_Returns200OK_WithTokenResponse() Returns Task TokenEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task TokenEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorAuthorizeEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorAuthorizeEndpointTests.html",
    "title": "Class TwoFactorAuthorizeEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorAuthorizeEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class TwoFactorAuthorizeEndpointTests Inheritance object TwoFactorAuthorizeEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() TwoFactorAuthorizeEndpoint_ReturnsStatus302Found_WhenValidTokenIsUsed() [Test] public Task TwoFactorAuthorizeEndpoint_ReturnsStatus302Found_WhenValidTokenIsUsed() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorManageEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorManageEndpointTests.html",
    "title": "Class TwoFactorManageEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorManageEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class TwoFactorManageEndpointTests Inheritance object TwoFactorManageEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() TwoFactorManageEndpoint_Returns204NoContent_WhenTwoFactorIsEnabled() [Test] public Task TwoFactorManageEndpoint_Returns204NoContent_WhenTwoFactorIsEnabled() Returns Task TwoFactorManageEndpoint_Returns400BadRequest_WhenTwoFactorFailsToEnable() [Test] public Task TwoFactorManageEndpoint_Returns400BadRequest_WhenTwoFactorFailsToEnable() Returns Task TwoFactorManageEndpoint_Returns500InternalServerError_WhenAnExceptionIsThrown() [Test] public Task TwoFactorManageEndpoint_Returns500InternalServerError_WhenAnExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorRecoveryCodesEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorRecoveryCodesEndpointTests.html",
    "title": "Class TwoFactorRecoveryCodesEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class TwoFactorRecoveryCodesEndpointTests Inheritance object TwoFactorRecoveryCodesEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() TwoFactorRecoveryCodesEndpoint_Returns200OK_WhenRecoveryCodesAreRequested() [Test] public Task TwoFactorRecoveryCodesEndpoint_Returns200OK_WhenRecoveryCodesAreRequested() Returns Task TwoFactorRecoveryCodesEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task TwoFactorRecoveryCodesEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorRecoveryCodesRedeemEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.TwoFactorRecoveryCodesRedeemEndpointTests.html",
    "title": "Class TwoFactorRecoveryCodesRedeemEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesRedeemEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class TwoFactorRecoveryCodesRedeemEndpointTests Inheritance object TwoFactorRecoveryCodesRedeemEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() TwoFactorRecoveryCodesRedeemEndpoint_Returns200OK_WhenOperationIsSuccessful() [Test] public Task TwoFactorRecoveryCodesRedeemEndpoint_Returns200OK_WhenOperationIsSuccessful() Returns Task TwoFactorRecoveryCodesRedeemEndpoint_Returns400BadRequest_WhenOperationIsNotSuccessful() [Test] public Task TwoFactorRecoveryCodesRedeemEndpoint_Returns400BadRequest_WhenOperationIsNotSuccessful() Returns Task TwoFactorRecoveryCodesRedeemEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task TwoFactorRecoveryCodesRedeemEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.UpdateEmailEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.UpdateEmailEndpointTests.html",
    "title": "Class UpdateEmailEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class UpdateEmailEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class UpdateEmailEndpointTests Inheritance object UpdateEmailEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdateEmailEndpoint_Returns204NoContent_WhenUpdatingIsSuccessful() [Test] public Task UpdateEmailEndpoint_Returns204NoContent_WhenUpdatingIsSuccessful() Returns Task UpdateEmailEndpoint_Returns400BadRequest_WhenUpdateFails() [Test] public Task UpdateEmailEndpoint_Returns400BadRequest_WhenUpdateFails() Returns Task UpdateEmailEndpoint_Returns500InternalServerError_WhenAnExceptionIsThrown() [Test] public Task UpdateEmailEndpoint_Returns500InternalServerError_WhenAnExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.UpdatePasswordEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.UpdatePasswordEndpointTests.html",
    "title": "Class UpdatePasswordEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePasswordEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class UpdatePasswordEndpointTests Inheritance object UpdatePasswordEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdatePasswordEndpoint_Returns204NoContent_WhenUpdateIsSuccessful() [Test] public Task UpdatePasswordEndpoint_Returns204NoContent_WhenUpdateIsSuccessful() Returns Task UpdatePasswordEndpoint_Returns400BadRequest_WhenUpdateIsFails() [Test] public Task UpdatePasswordEndpoint_Returns400BadRequest_WhenUpdateIsFails() Returns Task UpdatePasswordEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task UpdatePasswordEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.UpdatePhoneNumberEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.UpdatePhoneNumberEndpointTests.html",
    "title": "Class UpdatePhoneNumberEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePhoneNumberEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class UpdatePhoneNumberEndpointTests Inheritance object UpdatePhoneNumberEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetUp() [OneTimeSetUp] public void OneTimeSetUp() OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdatePhoneNumberEndpoint_Returns204NoContent_WhenUpdateIsSuccessful() [Test] public Task UpdatePhoneNumberEndpoint_Returns204NoContent_WhenUpdateIsSuccessful() Returns Task UpdatePhoneNumberEndpoint_Returns400BadRequest_WhenUpdateFails() [Test] public Task UpdatePhoneNumberEndpoint_Returns400BadRequest_WhenUpdateFails() Returns Task UpdatePhoneNumberEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Test] public Task UpdatePhoneNumberEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Classes AccountPurgeBackgroundServiceExposeProtected AccountPurgeBackgroundServiceTests AuthorizeEndpointTests ConfirmEmailEndpointTests CustomWebApplicationFactory<TProgram> DeleteAccountEndpointTests LogoutEndpointTests RefreshEndpointTests RegisterEndpointTests ResetPasswordEndpointTests SendTokenEmailEndpointTests TestFixture<TProgram> TokenEndpointTests TwoFactorAuthorizeEndpointTests TwoFactorManageEndpointTests TwoFactorRecoveryCodesEndpointTests TwoFactorRecoveryCodesRedeemEndpointTests UpdateEmailEndpointTests UpdatePasswordEndpointTests UpdatePhoneNumberEndpointTests"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.BusMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.BusMock.html",
    "title": "Class BusMock | ChristopherBriddock.Identity",
    "keywords": "Class BusMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class BusMock : Mock<IBus>, IFluentInterface, IMock<IBus>, IMockBase<BusMock> Inheritance object Mock Mock<IBus> BusMock Implements IFluentInterface IMock<IBus> IMockBase<BusMock> Inherited Members Mock<IBus>.ToString() Mock<IBus>.OnGetObject() Mock<IBus>.As<TInterface>() Mock<IBus>.Setup(Expression<Action<IBus>>) Mock<IBus>.Setup<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.SetupGet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.SetupSet<TProperty>(Action<IBus>) Mock<IBus>.SetupSet(Action<IBus>) Mock<IBus>.SetupAdd(Action<IBus>) Mock<IBus>.SetupRemove(Action<IBus>) Mock<IBus>.SetupProperty<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.SetupProperty<TProperty>(Expression<Func<IBus, TProperty>>, TProperty) Mock<IBus>.SetupAllProperties() Mock<IBus>.SetupSequence<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.SetupSequence(Expression<Action<IBus>>) Mock<IBus>.When(Func<bool>) Mock<IBus>.Verify(Expression<Action<IBus>>) Mock<IBus>.Verify(Expression<Action<IBus>>, Times) Mock<IBus>.Verify(Expression<Action<IBus>>, Func<Times>) Mock<IBus>.Verify(Expression<Action<IBus>>, string) Mock<IBus>.Verify(Expression<Action<IBus>>, Times, string) Mock<IBus>.Verify(Expression<Action<IBus>>, Func<Times>, string) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, Times) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, Func<Times>) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, string) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, Times, string) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Times) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Func<Times>) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, string) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Times, string) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Func<Times>, string) Mock<IBus>.VerifySet(Action<IBus>) Mock<IBus>.VerifySet(Action<IBus>, Times) Mock<IBus>.VerifySet(Action<IBus>, Func<Times>) Mock<IBus>.VerifySet(Action<IBus>, string) Mock<IBus>.VerifySet(Action<IBus>, Times, string) Mock<IBus>.VerifySet(Action<IBus>, Func<Times>, string) Mock<IBus>.VerifyAdd(Action<IBus>) Mock<IBus>.VerifyAdd(Action<IBus>, Times) Mock<IBus>.VerifyAdd(Action<IBus>, Func<Times>) Mock<IBus>.VerifyAdd(Action<IBus>, string) Mock<IBus>.VerifyAdd(Action<IBus>, Times, string) Mock<IBus>.VerifyAdd(Action<IBus>, Func<Times>, string) Mock<IBus>.VerifyRemove(Action<IBus>) Mock<IBus>.VerifyRemove(Action<IBus>, Times) Mock<IBus>.VerifyRemove(Action<IBus>, Func<Times>) Mock<IBus>.VerifyRemove(Action<IBus>, string) Mock<IBus>.VerifyRemove(Action<IBus>, Times, string) Mock<IBus>.VerifyRemove(Action<IBus>, Func<Times>, string) Mock<IBus>.VerifyNoOtherCalls() Mock<IBus>.Raise(Action<IBus>, EventArgs) Mock<IBus>.Raise(Action<IBus>, params object[]) Mock<IBus>.RaiseAsync(Action<IBus>, params object[]) Mock<IBus>.Expect(Expression<Action<IBus>>) Mock<IBus>.Expect<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.ExpectGet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.ExpectSet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.ExpectSet<TProperty>(Expression<Func<IBus, TProperty>>, TProperty) Mock<IBus>.Behavior Mock<IBus>.CallBase Mock<IBus>.DefaultValueProvider Mock<IBus>.Object Mock<IBus>.Name Mock<IBus>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public BusMock Mock() Returns BusMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.ClaimsPrincipalMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.ClaimsPrincipalMock.html",
    "title": "Class ClaimsPrincipalMock | ChristopherBriddock.Identity",
    "keywords": "Class ClaimsPrincipalMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class ClaimsPrincipalMock : Mock<ClaimsPrincipal>, IFluentInterface, IMock<ClaimsPrincipal>, IMockBase<ClaimsPrincipalMock> Inheritance object Mock Mock<ClaimsPrincipal> ClaimsPrincipalMock Implements IFluentInterface IMock<ClaimsPrincipal> IMockBase<ClaimsPrincipalMock> Inherited Members Mock<ClaimsPrincipal>.ToString() Mock<ClaimsPrincipal>.OnGetObject() Mock<ClaimsPrincipal>.As<TInterface>() Mock<ClaimsPrincipal>.Setup(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.Setup<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.SetupGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.SetupSet<TProperty>(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupSet(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupAdd(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupRemove(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupProperty<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.SetupProperty<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, TProperty) Mock<ClaimsPrincipal>.SetupAllProperties() Mock<ClaimsPrincipal>.SetupSequence<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.SetupSequence(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.When(Func<bool>) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Times) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Func<Times>) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, string) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Times, string) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Func<Times>, string) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, Times) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, Func<Times>) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, string) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, Times, string) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Times) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Func<Times>) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, string) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Times, string) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Times) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Func<Times>) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, string) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Times, string) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Times) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Func<Times>) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, string) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Times, string) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Times) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Func<Times>) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, string) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Times, string) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifyNoOtherCalls() Mock<ClaimsPrincipal>.Raise(Action<ClaimsPrincipal>, EventArgs) Mock<ClaimsPrincipal>.Raise(Action<ClaimsPrincipal>, params object[]) Mock<ClaimsPrincipal>.RaiseAsync(Action<ClaimsPrincipal>, params object[]) Mock<ClaimsPrincipal>.Expect(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.Expect<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.ExpectGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.ExpectSet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.ExpectSet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, TProperty) Mock<ClaimsPrincipal>.Behavior Mock<ClaimsPrincipal>.CallBase Mock<ClaimsPrincipal>.DefaultValueProvider Mock<ClaimsPrincipal>.Object Mock<ClaimsPrincipal>.Name Mock<ClaimsPrincipal>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public ClaimsPrincipalMock Mock() Returns ClaimsPrincipalMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.EmailPublisherMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.EmailPublisherMock.html",
    "title": "Class EmailPublisherMock | ChristopherBriddock.Identity",
    "keywords": "Class EmailPublisherMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class EmailPublisherMock : Mock<IEmailPublisher>, IFluentInterface, IMock<IEmailPublisher>, IMockBase<EmailPublisherMock> Inheritance object Mock Mock<IEmailPublisher> EmailPublisherMock Implements IFluentInterface IMock<IEmailPublisher> IMockBase<EmailPublisherMock> Inherited Members Mock<IEmailPublisher>.ToString() Mock<IEmailPublisher>.OnGetObject() Mock<IEmailPublisher>.As<TInterface>() Mock<IEmailPublisher>.Setup(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.Setup<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.SetupGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.SetupSet<TProperty>(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupSet(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupAdd(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupRemove(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupProperty<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.SetupProperty<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, TProperty) Mock<IEmailPublisher>.SetupAllProperties() Mock<IEmailPublisher>.SetupSequence<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.SetupSequence(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.When(Func<bool>) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Times) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Func<Times>) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, string) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Times, string) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Func<Times>, string) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, Times) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, Func<Times>) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, string) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, Times, string) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Times) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Func<Times>) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, string) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Times, string) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Func<Times>, string) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Times) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Func<Times>) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, string) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Times, string) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Func<Times>, string) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Times) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Func<Times>) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, string) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Times, string) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Func<Times>, string) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Times) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Func<Times>) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, string) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Times, string) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Func<Times>, string) Mock<IEmailPublisher>.VerifyNoOtherCalls() Mock<IEmailPublisher>.Raise(Action<IEmailPublisher>, EventArgs) Mock<IEmailPublisher>.Raise(Action<IEmailPublisher>, params object[]) Mock<IEmailPublisher>.RaiseAsync(Action<IEmailPublisher>, params object[]) Mock<IEmailPublisher>.Expect(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.Expect<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.ExpectGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.ExpectSet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.ExpectSet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, TProperty) Mock<IEmailPublisher>.Behavior Mock<IEmailPublisher>.CallBase Mock<IEmailPublisher>.DefaultValueProvider Mock<IEmailPublisher>.Object Mock<IEmailPublisher>.Name Mock<IEmailPublisher>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public EmailPublisherMock Mock() Returns EmailPublisherMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.FeatureManagerMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.FeatureManagerMock.html",
    "title": "Class FeatureManagerMock | ChristopherBriddock.Identity",
    "keywords": "Class FeatureManagerMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class FeatureManagerMock : Mock<IFeatureManager>, IFluentInterface, IMock<IFeatureManager>, IMockBase<FeatureManagerMock> Inheritance object Mock Mock<IFeatureManager> FeatureManagerMock Implements IFluentInterface IMock<IFeatureManager> IMockBase<FeatureManagerMock> Inherited Members Mock<IFeatureManager>.ToString() Mock<IFeatureManager>.OnGetObject() Mock<IFeatureManager>.As<TInterface>() Mock<IFeatureManager>.Setup(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.Setup<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.SetupGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.SetupSet<TProperty>(Action<IFeatureManager>) Mock<IFeatureManager>.SetupSet(Action<IFeatureManager>) Mock<IFeatureManager>.SetupAdd(Action<IFeatureManager>) Mock<IFeatureManager>.SetupRemove(Action<IFeatureManager>) Mock<IFeatureManager>.SetupProperty<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.SetupProperty<TProperty>(Expression<Func<IFeatureManager, TProperty>>, TProperty) Mock<IFeatureManager>.SetupAllProperties() Mock<IFeatureManager>.SetupSequence<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.SetupSequence(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.When(Func<bool>) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Times) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Func<Times>) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, string) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Times, string) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Func<Times>, string) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, Times) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, Func<Times>) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, string) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, Times, string) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Times) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Func<Times>) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, string) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Times, string) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Func<Times>, string) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Times) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Func<Times>) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, string) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Times, string) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Func<Times>, string) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Times) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Func<Times>) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, string) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Times, string) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Func<Times>, string) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Times) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Func<Times>) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, string) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Times, string) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Func<Times>, string) Mock<IFeatureManager>.VerifyNoOtherCalls() Mock<IFeatureManager>.Raise(Action<IFeatureManager>, EventArgs) Mock<IFeatureManager>.Raise(Action<IFeatureManager>, params object[]) Mock<IFeatureManager>.RaiseAsync(Action<IFeatureManager>, params object[]) Mock<IFeatureManager>.Expect(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.Expect<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.ExpectGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.ExpectSet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.ExpectSet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, TProperty) Mock<IFeatureManager>.Behavior Mock<IFeatureManager>.CallBase Mock<IFeatureManager>.DefaultValueProvider Mock<IFeatureManager>.Object Mock<IFeatureManager>.Name Mock<IFeatureManager>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public FeatureManagerMock Mock() Returns FeatureManagerMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.HttpContextMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.HttpContextMock.html",
    "title": "Class HttpContextMock | ChristopherBriddock.Identity",
    "keywords": "Class HttpContextMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class HttpContextMock : Mock<HttpContext>, IFluentInterface, IMock<HttpContext>, IMockBase<HttpContextMock> Inheritance object Mock Mock<HttpContext> HttpContextMock Implements IFluentInterface IMock<HttpContext> IMockBase<HttpContextMock> Inherited Members Mock<HttpContext>.ToString() Mock<HttpContext>.OnGetObject() Mock<HttpContext>.As<TInterface>() Mock<HttpContext>.Setup(Expression<Action<HttpContext>>) Mock<HttpContext>.Setup<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.SetupGet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.SetupSet<TProperty>(Action<HttpContext>) Mock<HttpContext>.SetupSet(Action<HttpContext>) Mock<HttpContext>.SetupAdd(Action<HttpContext>) Mock<HttpContext>.SetupRemove(Action<HttpContext>) Mock<HttpContext>.SetupProperty<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.SetupProperty<TProperty>(Expression<Func<HttpContext, TProperty>>, TProperty) Mock<HttpContext>.SetupAllProperties() Mock<HttpContext>.SetupSequence<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.SetupSequence(Expression<Action<HttpContext>>) Mock<HttpContext>.When(Func<bool>) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Times) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Func<Times>) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, string) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Times, string) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Func<Times>, string) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, Times) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, Func<Times>) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, string) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, Times, string) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Times) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Func<Times>) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, string) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Times, string) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Func<Times>, string) Mock<HttpContext>.VerifySet(Action<HttpContext>) Mock<HttpContext>.VerifySet(Action<HttpContext>, Times) Mock<HttpContext>.VerifySet(Action<HttpContext>, Func<Times>) Mock<HttpContext>.VerifySet(Action<HttpContext>, string) Mock<HttpContext>.VerifySet(Action<HttpContext>, Times, string) Mock<HttpContext>.VerifySet(Action<HttpContext>, Func<Times>, string) Mock<HttpContext>.VerifyAdd(Action<HttpContext>) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Times) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Func<Times>) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, string) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Times, string) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Func<Times>, string) Mock<HttpContext>.VerifyRemove(Action<HttpContext>) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Times) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Func<Times>) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, string) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Times, string) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Func<Times>, string) Mock<HttpContext>.VerifyNoOtherCalls() Mock<HttpContext>.Raise(Action<HttpContext>, EventArgs) Mock<HttpContext>.Raise(Action<HttpContext>, params object[]) Mock<HttpContext>.RaiseAsync(Action<HttpContext>, params object[]) Mock<HttpContext>.Expect(Expression<Action<HttpContext>>) Mock<HttpContext>.Expect<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.ExpectGet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.ExpectSet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.ExpectSet<TProperty>(Expression<Func<HttpContext, TProperty>>, TProperty) Mock<HttpContext>.Behavior Mock<HttpContext>.CallBase Mock<HttpContext>.DefaultValueProvider Mock<HttpContext>.Object Mock<HttpContext>.Name Mock<HttpContext>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public HttpContextMock Mock() Returns HttpContextMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.IHttpContextAccessorMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.IHttpContextAccessorMock.html",
    "title": "Class IHttpContextAccessorMock | ChristopherBriddock.Identity",
    "keywords": "Class IHttpContextAccessorMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class IHttpContextAccessorMock : Mock<IHttpContextAccessor>, IFluentInterface, IMock<IHttpContextAccessor>, IMockBase<IHttpContextAccessorMock> Inheritance object Mock Mock<IHttpContextAccessor> IHttpContextAccessorMock Implements IFluentInterface IMock<IHttpContextAccessor> IMockBase<IHttpContextAccessorMock> Inherited Members Mock<IHttpContextAccessor>.ToString() Mock<IHttpContextAccessor>.OnGetObject() Mock<IHttpContextAccessor>.As<TInterface>() Mock<IHttpContextAccessor>.Setup(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.Setup<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.SetupGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.SetupSet<TProperty>(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupSet(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupAdd(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupRemove(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupProperty<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.SetupProperty<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, TProperty) Mock<IHttpContextAccessor>.SetupAllProperties() Mock<IHttpContextAccessor>.SetupSequence<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.SetupSequence(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.When(Func<bool>) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Times) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Func<Times>) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, string) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Times, string) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Func<Times>, string) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, Times) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, Func<Times>) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, string) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, Times, string) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Times) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Func<Times>) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, string) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Times, string) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Times) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Func<Times>) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, string) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Times, string) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Times) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Func<Times>) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, string) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Times, string) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Times) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Func<Times>) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, string) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Times, string) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifyNoOtherCalls() Mock<IHttpContextAccessor>.Raise(Action<IHttpContextAccessor>, EventArgs) Mock<IHttpContextAccessor>.Raise(Action<IHttpContextAccessor>, params object[]) Mock<IHttpContextAccessor>.RaiseAsync(Action<IHttpContextAccessor>, params object[]) Mock<IHttpContextAccessor>.Expect(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.Expect<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.ExpectGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.ExpectSet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.ExpectSet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, TProperty) Mock<IHttpContextAccessor>.Behavior Mock<IHttpContextAccessor>.CallBase Mock<IHttpContextAccessor>.DefaultValueProvider Mock<IHttpContextAccessor>.Object Mock<IHttpContextAccessor>.Name Mock<IHttpContextAccessor>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public IHttpContextAccessorMock Mock() Returns IHttpContextAccessorMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.IMockBase-1.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.IMockBase-1.html",
    "title": "Interface IMockBase<T> | ChristopherBriddock.Identity",
    "keywords": "Interface IMockBase<T> Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public interface IMockBase<T> where T : class Type Parameters T Methods Mock() T Mock() Returns T"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.JsonWebTokenProviderMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.JsonWebTokenProviderMock.html",
    "title": "Class JsonWebTokenProviderMock | ChristopherBriddock.Identity",
    "keywords": "Class JsonWebTokenProviderMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class JsonWebTokenProviderMock : Mock<IJsonWebTokenProvider>, IFluentInterface, IMock<IJsonWebTokenProvider>, IMockBase<JsonWebTokenProviderMock> Inheritance object Mock Mock<IJsonWebTokenProvider> JsonWebTokenProviderMock Implements IFluentInterface IMock<IJsonWebTokenProvider> IMockBase<JsonWebTokenProviderMock> Inherited Members Mock<IJsonWebTokenProvider>.ToString() Mock<IJsonWebTokenProvider>.OnGetObject() Mock<IJsonWebTokenProvider>.As<TInterface>() Mock<IJsonWebTokenProvider>.Setup(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Setup<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.SetupGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.SetupSet<TProperty>(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupSet(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupAdd(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupRemove(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupProperty<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.SetupProperty<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, TProperty) Mock<IJsonWebTokenProvider>.SetupAllProperties() Mock<IJsonWebTokenProvider>.SetupSequence<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.SetupSequence(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.When(Func<bool>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Times) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Func<Times>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, string) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Times, string) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Func<Times>, string) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Times) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Func<Times>) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, string) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Times, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Times) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Times, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyNoOtherCalls() Mock<IJsonWebTokenProvider>.Raise(Action<IJsonWebTokenProvider>, EventArgs) Mock<IJsonWebTokenProvider>.Raise(Action<IJsonWebTokenProvider>, params object[]) Mock<IJsonWebTokenProvider>.RaiseAsync(Action<IJsonWebTokenProvider>, params object[]) Mock<IJsonWebTokenProvider>.Expect(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Expect<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.ExpectGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.ExpectSet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.ExpectSet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, TProperty) Mock<IJsonWebTokenProvider>.Behavior Mock<IJsonWebTokenProvider>.CallBase Mock<IJsonWebTokenProvider>.DefaultValueProvider Mock<IJsonWebTokenProvider>.Object Mock<IJsonWebTokenProvider>.Name Mock<IJsonWebTokenProvider>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public JsonWebTokenProviderMock Mock() Returns JsonWebTokenProviderMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.JwtSecurityTokenHandlerMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.JwtSecurityTokenHandlerMock.html",
    "title": "Class JwtSecurityTokenHandlerMock | ChristopherBriddock.Identity",
    "keywords": "Class JwtSecurityTokenHandlerMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class JwtSecurityTokenHandlerMock : Mock<JwtSecurityTokenHandler>, IFluentInterface, IMock<JwtSecurityTokenHandler>, IMockBase<JwtSecurityTokenHandlerMock> Inheritance object Mock Mock<JwtSecurityTokenHandler> JwtSecurityTokenHandlerMock Implements IFluentInterface IMock<JwtSecurityTokenHandler> IMockBase<JwtSecurityTokenHandlerMock> Inherited Members Mock<JwtSecurityTokenHandler>.ToString() Mock<JwtSecurityTokenHandler>.OnGetObject() Mock<JwtSecurityTokenHandler>.As<TInterface>() Mock<JwtSecurityTokenHandler>.Setup(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.Setup<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.SetupGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.SetupSet<TProperty>(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupSet(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupAdd(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupRemove(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupProperty<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.SetupProperty<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, TProperty) Mock<JwtSecurityTokenHandler>.SetupAllProperties() Mock<JwtSecurityTokenHandler>.SetupSequence<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.SetupSequence(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.When(Func<bool>) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Times) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Func<Times>) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, string) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Times, string) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, Times) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, Func<Times>) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, string) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Times) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, string) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Times) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, string) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Times, string) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Times) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, string) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Times) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, string) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifyNoOtherCalls() Mock<JwtSecurityTokenHandler>.Raise(Action<JwtSecurityTokenHandler>, EventArgs) Mock<JwtSecurityTokenHandler>.Raise(Action<JwtSecurityTokenHandler>, params object[]) Mock<JwtSecurityTokenHandler>.RaiseAsync(Action<JwtSecurityTokenHandler>, params object[]) Mock<JwtSecurityTokenHandler>.Expect(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.Expect<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.ExpectGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.ExpectSet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.ExpectSet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, TProperty) Mock<JwtSecurityTokenHandler>.Behavior Mock<JwtSecurityTokenHandler>.CallBase Mock<JwtSecurityTokenHandler>.DefaultValueProvider Mock<JwtSecurityTokenHandler>.Object Mock<JwtSecurityTokenHandler>.Name Mock<JwtSecurityTokenHandler>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public JwtSecurityTokenHandlerMock Mock() Returns JwtSecurityTokenHandlerMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.LoggerMock-1.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.LoggerMock-1.html",
    "title": "Class LoggerMock<T> | ChristopherBriddock.Identity",
    "keywords": "Class LoggerMock<T> Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class LoggerMock<T> : Mock<ILogger<T>>, IFluentInterface, IMock<ILogger<T>>, IMockBase<LoggerMock<T>> where T : class Type Parameters T Inheritance object Mock Mock<ILogger<T>> LoggerMock<T> Implements IFluentInterface IMock<ILogger<T>> IMockBase<LoggerMock<T>> Inherited Members Mock<ILogger<T>>.ToString() Mock<ILogger<T>>.OnGetObject() Mock<ILogger<T>>.As<TInterface>() Mock<ILogger<T>>.Setup(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.Setup<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.SetupGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.SetupSet<TProperty>(Action<ILogger<T>>) Mock<ILogger<T>>.SetupSet(Action<ILogger<T>>) Mock<ILogger<T>>.SetupAdd(Action<ILogger<T>>) Mock<ILogger<T>>.SetupRemove(Action<ILogger<T>>) Mock<ILogger<T>>.SetupProperty<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.SetupProperty<TProperty>(Expression<Func<ILogger<T>, TProperty>>, TProperty) Mock<ILogger<T>>.SetupAllProperties() Mock<ILogger<T>>.SetupSequence<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.SetupSequence(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.When(Func<bool>) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Times) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Func<Times>) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, string) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Times, string) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Func<Times>, string) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, Times) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, Func<Times>) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, string) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, Times, string) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Times) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Func<Times>) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, string) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Times, string) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Func<Times>, string) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Times) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Func<Times>) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, string) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Times, string) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Func<Times>, string) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Times) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Func<Times>) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, string) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Times, string) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Func<Times>, string) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Times) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Func<Times>) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, string) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Times, string) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Func<Times>, string) Mock<ILogger<T>>.VerifyNoOtherCalls() Mock<ILogger<T>>.Raise(Action<ILogger<T>>, EventArgs) Mock<ILogger<T>>.Raise(Action<ILogger<T>>, params object[]) Mock<ILogger<T>>.RaiseAsync(Action<ILogger<T>>, params object[]) Mock<ILogger<T>>.Expect(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.Expect<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.ExpectGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.ExpectSet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.ExpectSet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, TProperty) Mock<ILogger<T>>.Behavior Mock<ILogger<T>>.CallBase Mock<ILogger<T>>.DefaultValueProvider Mock<ILogger<T>>.Object Mock<ILogger<T>>.Name Mock<ILogger<T>>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public LoggerMock<T> Mock() Returns LoggerMock<T>"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.ServiceProviderMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.ServiceProviderMock.html",
    "title": "Class ServiceProviderMock | ChristopherBriddock.Identity",
    "keywords": "Class ServiceProviderMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class ServiceProviderMock : Mock<IServiceProvider>, IFluentInterface, IMock<IServiceProvider>, IMockBase<ServiceProviderMock> Inheritance object Mock Mock<IServiceProvider> ServiceProviderMock Implements IFluentInterface IMock<IServiceProvider> IMockBase<ServiceProviderMock> Inherited Members Mock<IServiceProvider>.ToString() Mock<IServiceProvider>.OnGetObject() Mock<IServiceProvider>.As<TInterface>() Mock<IServiceProvider>.Setup(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.Setup<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.SetupGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.SetupSet<TProperty>(Action<IServiceProvider>) Mock<IServiceProvider>.SetupSet(Action<IServiceProvider>) Mock<IServiceProvider>.SetupAdd(Action<IServiceProvider>) Mock<IServiceProvider>.SetupRemove(Action<IServiceProvider>) Mock<IServiceProvider>.SetupProperty<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.SetupProperty<TProperty>(Expression<Func<IServiceProvider, TProperty>>, TProperty) Mock<IServiceProvider>.SetupAllProperties() Mock<IServiceProvider>.SetupSequence<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.SetupSequence(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.When(Func<bool>) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Times) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Func<Times>) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, string) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Times, string) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Func<Times>, string) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, Times) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, Func<Times>) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, string) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, Times, string) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Times) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Func<Times>) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, string) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Times, string) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Func<Times>, string) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Times) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Func<Times>) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, string) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Times, string) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Func<Times>, string) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Times) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Func<Times>) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, string) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Times, string) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Func<Times>, string) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Times) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Func<Times>) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, string) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Times, string) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Func<Times>, string) Mock<IServiceProvider>.VerifyNoOtherCalls() Mock<IServiceProvider>.Raise(Action<IServiceProvider>, EventArgs) Mock<IServiceProvider>.Raise(Action<IServiceProvider>, params object[]) Mock<IServiceProvider>.RaiseAsync(Action<IServiceProvider>, params object[]) Mock<IServiceProvider>.Expect(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.Expect<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.ExpectGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.ExpectSet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.ExpectSet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, TProperty) Mock<IServiceProvider>.Behavior Mock<IServiceProvider>.CallBase Mock<IServiceProvider>.DefaultValueProvider Mock<IServiceProvider>.Object Mock<IServiceProvider>.Name Mock<IServiceProvider>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public ServiceProviderMock Mock() Returns ServiceProviderMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.SignInManagerMock-1.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.SignInManagerMock-1.html",
    "title": "Class SignInManagerMock<TUser> | ChristopherBriddock.Identity",
    "keywords": "Class SignInManagerMock<TUser> Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class SignInManagerMock<TUser> : IMockBase<Mock<SignInManager<TUser>>> where TUser : IdentityUser<Guid> Type Parameters TUser Inheritance object SignInManagerMock<TUser> Implements IMockBase<Mock<SignInManager<TUser>>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Mock() public Mock<SignInManager<TUser>> Mock() Returns Mock<SignInManager<TUser>>"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.UserManagerMock-1.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.UserManagerMock-1.html",
    "title": "Class UserManagerMock<TUser> | ChristopherBriddock.Identity",
    "keywords": "Class UserManagerMock<TUser> Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class UserManagerMock<TUser> : IMockBase<Mock<UserManager<TUser>>> where TUser : class Type Parameters TUser Inheritance object UserManagerMock<TUser> Implements IMockBase<Mock<UserManager<TUser>>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Mock() public Mock<UserManager<TUser>> Mock() Returns Mock<UserManager<TUser>>"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Tests.Mocks | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Classes BusMock ClaimsPrincipalMock EmailPublisherMock FeatureManagerMock HttpContextMock IHttpContextAccessorMock JsonWebTokenProviderMock JwtSecurityTokenHandlerMock LoggerMock<T> ServiceProviderMock SignInManagerMock<TUser> UserManagerMock<TUser> Interfaces IMockBase<T>"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.EmailPublisherTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.EmailPublisherTests.html",
    "title": "Class EmailPublisherTests | ChristopherBriddock.Identity",
    "keywords": "Class EmailPublisherTests Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class EmailPublisherTests Inheritance object EmailPublisherTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PublishIsSuccessfulWithCorrectMessage() [Test] public Task PublishIsSuccessfulWithCorrectMessage() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.JsonWebTokenProviderTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.JsonWebTokenProviderTests.html",
    "title": "Class JsonWebTokenProviderTests | ChristopherBriddock.Identity",
    "keywords": "Class JsonWebTokenProviderTests Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests Assembly ChristopherBriddock.Service.Identity.Tests.dll [TestFixture] public class JsonWebTokenProviderTests Inheritance object JsonWebTokenProviderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryCreateTokenAsync_ShouldCreateToken_WhenValidParametersAreProvided() [Test] public Task TryCreateTokenAsync_ShouldCreateToken_WhenValidParametersAreProvided() Returns Task TryValidateTokenAsync_ShouldFail_WhenInvalidTokenIsProvided() [Test] public Task TryValidateTokenAsync_ShouldFail_WhenInvalidTokenIsProvided() Returns Task TryValidateTokenAsync_ShouldValidateToken_WhenValidTokenIsProvided() [Test] public Task TryValidateTokenAsync_ShouldValidateToken_WhenValidTokenIsProvided() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests Classes EmailPublisherTests JsonWebTokenProviderTests"
  },
  "api/ChristopherBriddock.Service.Identity.html": {
    "href": "api/ChristopherBriddock.Service.Identity.html",
    "title": "Namespace ChristopherBriddock.Service.Identity | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity Classes Program The entry point for the Web Application. Seed Provides methods for seeding initial data into the application database. Seed.Test Seeds all test user data."
  },
  "api/ChristopherBriddock.WorkerService.Email.ISmtpClient.html": {
    "href": "api/ChristopherBriddock.WorkerService.Email.ISmtpClient.html",
    "title": "Interface ISmtpClient | ChristopherBriddock.Identity",
    "keywords": "Interface ISmtpClient Namespace ChristopherBriddock.WorkerService.Email Assembly ChristopherBriddock.WorkerService.Email.dll public interface ISmtpClient : IDisposable Inherited Members IDisposable.Dispose() Methods SendMailAsync(MailMessage) Task SendMailAsync(MailMessage message) Parameters message MailMessage Returns Task"
  },
  "api/ChristopherBriddock.WorkerService.Email.SmtpClientWrapper.html": {
    "href": "api/ChristopherBriddock.WorkerService.Email.SmtpClientWrapper.html",
    "title": "Class SmtpClientWrapper | ChristopherBriddock.Identity",
    "keywords": "Class SmtpClientWrapper Namespace ChristopherBriddock.WorkerService.Email Assembly ChristopherBriddock.WorkerService.Email.dll Wrapper class for the SmtpClient to send emails. public class SmtpClientWrapper : ISmtpClient, IDisposable Inheritance object SmtpClientWrapper Implements ISmtpClient IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SmtpClientWrapper(SmtpClient, IConfiguration) Initializes a new instance of the SmtpClientWrapper class. public SmtpClientWrapper(SmtpClient smtpClient, IConfiguration configuration) Parameters smtpClient SmtpClient The SmtpClient instance to be used for sending emails. configuration IConfiguration Properties Configuration Configuration interface for accessing email settings. public IConfiguration Configuration { get; } Property Value IConfiguration Methods Dispose() Disposes the SmtpClient instance. public void Dispose() SendMailAsync(MailMessage) Sends an email asynchronously. public Task SendMailAsync(MailMessage message) Parameters message MailMessage The email message to be sent. Returns Task A task representing the asynchronous email sending operation."
  },
  "api/ChristopherBriddock.WorkerService.Email.Tests.WorkerTests.html": {
    "href": "api/ChristopherBriddock.WorkerService.Email.Tests.WorkerTests.html",
    "title": "Class WorkerTests | ChristopherBriddock.Identity",
    "keywords": "Class WorkerTests Namespace ChristopherBriddock.WorkerService.Email.Tests Assembly ChristopherBriddock.WorkerService.Email.Tests.dll [TestFixture] public class WorkerTests Inheritance object WorkerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Consume_ConfirmEmail_SendsEmail() [Test] public Task Consume_ConfirmEmail_SendsEmail() Returns Task Consume_ForgotPassword_SendsEmail() [Test] public Task Consume_ForgotPassword_SendsEmail() Returns Task Consume_TwoFactorToken_SendsEmail() [Test] public Task Consume_TwoFactorToken_SendsEmail() Returns Task Setup() [SetUp] public void Setup()"
  },
  "api/ChristopherBriddock.WorkerService.Email.Tests.html": {
    "href": "api/ChristopherBriddock.WorkerService.Email.Tests.html",
    "title": "Namespace ChristopherBriddock.WorkerService.Email.Tests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.WorkerService.Email.Tests Classes WorkerTests"
  },
  "api/ChristopherBriddock.WorkerService.Email.Worker.html": {
    "href": "api/ChristopherBriddock.WorkerService.Email.Worker.html",
    "title": "Class Worker | ChristopherBriddock.Identity",
    "keywords": "Class Worker Namespace ChristopherBriddock.WorkerService.Email Assembly ChristopherBriddock.WorkerService.Email.dll Consume the message from the message queue, and sends an email. public class Worker : IConsumer<EmailMessage>, IConsumer Inheritance object Worker Implements IConsumer<EmailMessage> IConsumer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of Worker Constructors Worker(ILogger<Worker>, IServiceProvider) Consume the message from the message queue, and sends an email. public Worker(ILogger<Worker> logger, IServiceProvider serviceProvider) Parameters logger ILogger<Worker> The application logger. serviceProvider IServiceProvider Remarks Initializes a new instance of Worker Properties Logger The application logger. public ILogger<Worker> Logger { get; } Property Value ILogger<Worker> ServiceProvider The service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods Consume(ConsumeContext<EmailMessage>) Consumes a message from the message queue. public Task Consume(ConsumeContext<EmailMessage> context) Parameters context ConsumeContext<EmailMessage> The MassTransit.ConsumeContext<T> that allows for message consumption. Returns Task An asyncronous Task Remarks This method is automatically executed, as MassTransit registers consumers and publishers (producers) as a BackgroundService which implements IHostedService"
  },
  "api/ChristopherBriddock.WorkerService.Email.html": {
    "href": "api/ChristopherBriddock.WorkerService.Email.html",
    "title": "Namespace ChristopherBriddock.WorkerService.Email | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.WorkerService.Email Classes SmtpClientWrapper Wrapper class for the SmtpClient to send emails. Worker Consume the message from the message queue, and sends an email. Interfaces ISmtpClient"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the homepage | ChristopherBriddock.Identity",
    "keywords": "This is the homepage Refer to API for the documentation."
  },
  "src/ChristopherBriddock.Service.Identity.UI/Angular/Identity/README.html": {
    "href": "src/ChristopherBriddock.Service.Identity.UI/Angular/Identity/README.html",
    "title": "Identity | ChristopherBriddock.Identity",
    "keywords": "Identity This project was generated with Angular CLI version 17.3.6. Development server Run ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files. Code scaffolding Run ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module. Build Run ng build to build the project. The build artifacts will be stored in the dist/ directory. Running unit tests Run ng test to execute the unit tests via Karma. Running end-to-end tests Run ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities. Further help To get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page."
  },
  "src/ChristopherBriddock.Service.Identity.UI/React/identity/README.html": {
    "href": "src/ChristopherBriddock.Service.Identity.UI/React/identity/README.html",
    "title": "| ChristopherBriddock.Identity",
    "keywords": "This is a Next.js project bootstrapped with create-next-app. Getting Started First, run the development server: npm run dev # or yarn dev # or pnpm dev # or bun dev Open http://localhost:3000 with your browser to see the result. You can start editing the page by modifying app/page.tsx. The page auto-updates as you edit the file. This project uses next/font to automatically optimize and load Inter, a custom Google Font. Learn More To learn more about Next.js, take a look at the following resources: Next.js Documentation - learn about Next.js features and API. Learn Next.js - an interactive Next.js tutorial. You can check out the Next.js GitHub repository - your feedback and contributions are welcome! Deploy on Vercel The easiest way to deploy your Next.js app is to use the Vercel Platform from the creators of Next.js. Check out our Next.js deployment documentation for more details."
  }
}