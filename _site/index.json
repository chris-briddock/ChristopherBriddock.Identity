{
  "README.html": {
    "href": "README.html",
    "title": "ChristopherBriddock.Service.Identity | ChristopherBriddock.Identity",
    "keywords": "ChristopherBriddock.Service.Identity The Identity Service is a robust authentication and authorization component for your application, developed using ASP.NET 8 and integrating various libraries to ensure secure identity management. Table of Contents Introduction User Functionality Technical Functionality Endpoints Getting Started License Introduction The Identity Service plays a crucial role in your application's security infrastructure, providing essential features for user authentication, authorization, and identity management. This README provides an overview of the service, libraries used, available endpoints, and instructions on getting started. User Functionality Features Register Authorise Delete Current User Update Current User Password Reset Current User Password Update Current User Email Address Account Lockout on 3 retries, for 10 minutes. Two Step Verification Refresh Bearer Token Two Factor Recovery Codes Technical Functionality Features RabbitMQ and Azure Service Bus support API Health Checks Secure JWT Bearer Authentication Azure Application Insights Monitoring Logging using Serilog (To Console Or To External Logging Server) e.g Seq or ElasticSearch Resilliant SQL Server connections using Entity Framework Core Encrypted User Passwords Uses HTTP/3 and fallsback to HTTP/2 or HTTP/1.1 Endpoints /authorise: Endpoint for user authorization. /confirmemail: Endpoint for confirming user email. /forgotpassword: Endpoint for handling forgotten passwords. /logout: Endpoint for user logout. /refresh: Endpoint for refreshing authentication tokens. /register: Endpoint for user registration. /resetpassword: Endpoint for resetting user passwords. /token: Endpoint for token management. /2fa/authorise: Endpoint for two-factor authentication authorization. /2fa/manage: Endpoint for managing two-factor authentication settings. /2fa/codes: Endpoint for generating and managing two-factor authentication codes. /2fa/redeem: Endpoint for reedming two-factor recovery codes. /2fa/email: Endpoint for sending two factor code emails. /account/email: Endpoint for managing user account email. /account/phonenumber: Endpoint for managing user account phone number. /account/password: Endpoint for managing user account password. Getting Started To get started with the Identity Service, follow these steps: Clone the repository: git clone https://github.com/chris-briddock/ChristopherBriddock.Identity.git Open the solution. Ensure you have an PostgreSQL database available at minimum. Optionally you can also run Seq, RabbitMq or Azure Service Bus, Azure Application Insights and Redis. Please configure all placeholder values in appsettings.json in both services. Build and run the Web API. License This project is licensed under the MIT License. See the LICENSE file for details."
  },
  "api/ChristopherBriddock.Service.Common.Constants.CorsConstants.html": {
    "href": "api/ChristopherBriddock.Service.Common.Constants.CorsConstants.html",
    "title": "Class CorsConstants | ChristopherBriddock.Identity",
    "keywords": "Class CorsConstants Namespace ChristopherBriddock.Service.Common.Constants Assembly ChristopherBriddock.Service.Common.dll Defines the constant values relate to CORS. public static class CorsConstants Inheritance object CorsConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PolicyName The CORS policy name. public const string PolicyName = \"CorsPolicy\" Field Value string"
  },
  "api/ChristopherBriddock.Service.Common.Constants.EmailPublisherConstants.html": {
    "href": "api/ChristopherBriddock.Service.Common.Constants.EmailPublisherConstants.html",
    "title": "Class EmailPublisherConstants | ChristopherBriddock.Identity",
    "keywords": "Class EmailPublisherConstants Namespace ChristopherBriddock.Service.Common.Constants Assembly ChristopherBriddock.Service.Common.dll Represents the types of email messages that can be sent from the application to the message queue. public static class EmailPublisherConstants Inheritance object EmailPublisherConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ForgotPassword The value for a forogtten password message. public const string ForgotPassword = \"ForgotPassword\" Field Value string Register The value for a register message public const string Register = \"Register\" Field Value string TwoFactorToken The value for a two factor token message. public const string TwoFactorToken = \"TwoFactorToken\" Field Value string"
  },
  "api/ChristopherBriddock.Service.Common.Constants.FeatureFlagConstants.html": {
    "href": "api/ChristopherBriddock.Service.Common.Constants.FeatureFlagConstants.html",
    "title": "Class FeatureFlagConstants | ChristopherBriddock.Identity",
    "keywords": "Class FeatureFlagConstants Namespace ChristopherBriddock.Service.Common.Constants Assembly ChristopherBriddock.Service.Common.dll Contains configuration definitions for features that can be disabled or enabled. public static class FeatureFlagConstants Inheritance object FeatureFlagConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AzApplicationInsights Gets or sets the boolean to enable or disable Azure Application Insights. public const string AzApplicationInsights = \"ApplicationInsights\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) AzServiceBus Gets or sets the boolean to enable or disable public const string AzServiceBus = \"ServiceBus\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) RabbitMq Gets or sets the boolean to enable or disable public const string RabbitMq = \"RabbitMq\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) Redis Gets or sets the boolean to enable or disable Redis caching. public const string Redis = \"Redis\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string) Seq Gets or sets the boolean to enable or disable the external logging server. public const string Seq = \"Seq\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called IsEnabledAsync(string)"
  },
  "api/ChristopherBriddock.Service.Common.Constants.html": {
    "href": "api/ChristopherBriddock.Service.Common.Constants.html",
    "title": "Namespace ChristopherBriddock.Service.Common.Constants | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Common.Constants Classes CorsConstants Defines the constant values relate to CORS. EmailPublisherConstants Represents the types of email messages that can be sent from the application to the message queue. FeatureFlagConstants Contains configuration definitions for features that can be disabled or enabled."
  },
  "api/ChristopherBriddock.Service.Common.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Common.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | ChristopherBriddock.Identity",
    "keywords": "Class ServiceCollectionExtensions Namespace ChristopherBriddock.Service.Common.Extensions Assembly ChristopherBriddock.Service.Common.dll Extension methods for the IServiceCollection public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSerilogWithConfiguration(IServiceCollection) Adds serilog to console by default, optionally adds Seq by setting the feature flag. public static IServiceCollection AddSerilogWithConfiguration(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance."
  },
  "api/ChristopherBriddock.Service.Common.Extensions.html": {
    "href": "api/ChristopherBriddock.Service.Common.Extensions.html",
    "title": "Namespace ChristopherBriddock.Service.Common.Extensions | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Common.Extensions Classes ServiceCollectionExtensions Extension methods for the IServiceCollection"
  },
  "api/ChristopherBriddock.Service.Common.Messaging.EmailMessage.html": {
    "href": "api/ChristopherBriddock.Service.Common.Messaging.EmailMessage.html",
    "title": "Class EmailMessage | ChristopherBriddock.Identity",
    "keywords": "Class EmailMessage Namespace ChristopherBriddock.Service.Common.Messaging Assembly ChristopherBriddock.Service.Common.dll Represent an message to be published to the message queue for emails. public sealed class EmailMessage Inheritance object EmailMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code The code for two factor, forgotpassword, and registration. public string Code { get; set; } Property Value string EmailAddress The email address to which the email should be sent to. public string EmailAddress { get; set; } Property Value string Type The type of email to be sent to the message queue. EmailPublisherConstants public string Type { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Common.Messaging.html": {
    "href": "api/ChristopherBriddock.Service.Common.Messaging.html",
    "title": "Namespace ChristopherBriddock.Service.Common.Messaging | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Common.Messaging Classes EmailMessage Represent an message to be published to the message queue for emails."
  },
  "api/ChristopherBriddock.Service.Email.EmailConsumer.html": {
    "href": "api/ChristopherBriddock.Service.Email.EmailConsumer.html",
    "title": "Class EmailConsumer | ChristopherBriddock.Identity",
    "keywords": "Class EmailConsumer Namespace ChristopherBriddock.Service.Email Assembly ChristopherBriddock.Service.Email.dll Initializes a new instance of EmailConsumer public class EmailConsumer : IConsumer<EmailMessage>, IConsumer Inheritance object EmailConsumer Implements IConsumer<EmailMessage> IConsumer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmailConsumer(ILogger<EmailConsumer>, IConfiguration) Initializes a new instance of EmailConsumer public EmailConsumer(ILogger<EmailConsumer> logger, IConfiguration configuration) Parameters logger ILogger<EmailConsumer> configuration IConfiguration Properties Configuration public IConfiguration Configuration { get; } Property Value IConfiguration Logger public ILogger<EmailConsumer> Logger { get; } Property Value ILogger<EmailConsumer> Methods Consume(ConsumeContext<EmailMessage>) Consumes a message from the message queue. public Task Consume(ConsumeContext<EmailMessage> context) Parameters context ConsumeContext<EmailMessage> The MassTransit.ConsumeContext<T> that allows for message consumption. Returns Task An asyncronous Task Remarks This method is automatically executed, as MassTransit registers consumers and pushliers (producers) as a BackgroundService which implements IHostedService There is no need to implement any endpoints."
  },
  "api/ChristopherBriddock.Service.Email.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Email.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | ChristopherBriddock.Identity",
    "keywords": "Class ServiceCollectionExtensions Namespace ChristopherBriddock.Service.Email.Extensions Assembly ChristopherBriddock.Service.Email.dll public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddConsumerMessaging(IServiceCollection) Adds consumer messages for rabbitmq or azure service bus. public static IServiceCollection AddConsumerMessaging(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance."
  },
  "api/ChristopherBriddock.Service.Email.Extensions.html": {
    "href": "api/ChristopherBriddock.Service.Email.Extensions.html",
    "title": "Namespace ChristopherBriddock.Service.Email.Extensions | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Email.Extensions Classes ServiceCollectionExtensions"
  },
  "api/ChristopherBriddock.Service.Email.Tests.UnitTest1.html": {
    "href": "api/ChristopherBriddock.Service.Email.Tests.UnitTest1.html",
    "title": "Class UnitTest1 | ChristopherBriddock.Identity",
    "keywords": "Class UnitTest1 Namespace ChristopherBriddock.Service.Email.Tests Assembly ChristopherBriddock.Service.Email.Tests.dll public class UnitTest1 Inheritance object UnitTest1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Test1() [Fact] public void Test1()"
  },
  "api/ChristopherBriddock.Service.Email.Tests.html": {
    "href": "api/ChristopherBriddock.Service.Email.Tests.html",
    "title": "Namespace ChristopherBriddock.Service.Email.Tests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Email.Tests Classes UnitTest1"
  },
  "api/ChristopherBriddock.Service.Email.html": {
    "href": "api/ChristopherBriddock.Service.Email.html",
    "title": "Namespace ChristopherBriddock.Service.Email | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Email Classes EmailConsumer Initializes a new instance of EmailConsumer"
  },
  "api/ChristopherBriddock.Service.Identity.Constants.RoleConstants.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Constants.RoleConstants.html",
    "title": "Class RoleConstants | ChristopherBriddock.Identity",
    "keywords": "Class RoleConstants Namespace ChristopherBriddock.Service.Identity.Constants Assembly ChristopherBriddock.Service.Identity.dll Constant values for roles available in the system by default. public static class RoleConstants Inheritance object RoleConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks These roles will be embedded in the user's JWT token, as a role claim. Fields AdminRole Represents the admin role. public const string AdminRole = \"Admin\" Field Value string Remarks The maximum amount of access. UserRole Represents the user role. public const string UserRole = \"User\" Field Value string Remarks The minimum amount of access."
  },
  "api/ChristopherBriddock.Service.Identity.Constants.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Constants.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Constants | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Constants Classes RoleConstants Constant values for roles available in the system by default."
  },
  "api/ChristopherBriddock.Service.Identity.Data.AppDbContext.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Data.AppDbContext.html",
    "title": "Class AppDbContext | ChristopherBriddock.Identity",
    "keywords": "Class AppDbContext Namespace ChristopherBriddock.Service.Identity.Data Assembly ChristopherBriddock.Service.Identity.dll Represents a session with the database and can be used to query and save instances of your entities. public sealed class AppDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>> IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>> IdentityDbContext<ApplicationUser, ApplicationRole, Guid> AppDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.UserRoles IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.Roles IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.RoleClaims IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.Users IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserClaims IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserLogins IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserTokens DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.ToString() DbContext.Equals(object) DbContext.GetHashCode() DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AppDbContext(IConfiguration, IWebHostEnvironment) Represents a session with the database and can be used to query and save instances of your entities. public AppDbContext(IConfiguration configuration, IWebHostEnvironment webHostEnvironment) Parameters configuration IConfiguration The application's configuration. webHostEnvironment IWebHostEnvironment Provides information about the web host environment. Properties WebHostEnvironment The web host environment provides information about the environment it is running in. public IWebHostEnvironment WebHostEnvironment { get; } Property Value IWebHostEnvironment Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples."
  },
  "api/ChristopherBriddock.Service.Identity.Data.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Data.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Data | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Data Classes AppDbContext Represents a session with the database and can be used to query and save instances of your entities."
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.AuthoriseEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.AuthoriseEndpoint.html",
    "title": "Class AuthoriseEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class AuthoriseEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint for authorizing a user. public sealed class AuthoriseEndpoint : EndpointBaseAsync.WithRequest<AuthorizeRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<AuthorizeRequest>.WithoutParam.WithActionResult AuthoriseEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of AuthoriseEndpoint Constructors AuthoriseEndpoint(IServiceProvider, ILogger<AuthoriseEndpoint>) Exposes an endpoint for authorizing a user. public AuthoriseEndpoint(IServiceProvider services, ILogger<AuthoriseEndpoint> logger) Parameters services IServiceProvider The service provider. logger ILogger<AuthoriseEndpoint> The logger for this endpoint. Remarks Initializes a new instance of AuthoriseEndpoint Methods HandleAsync(AuthorizeRequest, CancellationToken) Allows a user to be authorized. [HttpPost(\"/authorise\")] [AllowAnonymous] [ProducesResponseType(401)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(AuthorizeRequest request, CancellationToken cancellationToken = default) Parameters request AuthorizeRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.ConfirmEmailEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.ConfirmEmailEndpoint.html",
    "title": "Class ConfirmEmailEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class ConfirmEmailEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll An endpoint which allows confirming the users email address. public sealed class ConfirmEmailEndpoint : EndpointBaseAsync.WithRequest<ConfirmEmailRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<ConfirmEmailRequest>.WithoutParam.WithActionResult ConfirmEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializses a new instance of ConfirmEmailEndpoint Constructors ConfirmEmailEndpoint(IServiceProvider, ILogger<ConfirmEmailEndpoint>) An endpoint which allows confirming the users email address. public ConfirmEmailEndpoint(IServiceProvider services, ILogger<ConfirmEmailEndpoint> logger) Parameters services IServiceProvider The IServiceProvider logger ILogger<ConfirmEmailEndpoint> The logger for this endpoint. Remarks Initializses a new instance of ConfirmEmailEndpoint Methods HandleAsync(ConfirmEmailRequest, CancellationToken) Allows a user to confirm their email address. [HttpPost(\"/confirmemail\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(ConfirmEmailRequest request, CancellationToken cancellationToken = default) Parameters request ConfirmEmailRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.DeleteAccountEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.DeleteAccountEndpoint.html",
    "title": "Class DeleteAccountEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class DeleteAccountEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows the user to enable two factor. public class DeleteAccountEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult DeleteAccountEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of DeleteAccountEndpoint Constructors DeleteAccountEndpoint(ILogger<DeleteAccountEndpoint>, IServiceProvider) Exposes an endpoint that allows the user to enable two factor. public DeleteAccountEndpoint(ILogger<DeleteAccountEndpoint> logger, IServiceProvider serviceProvider) Parameters logger ILogger<DeleteAccountEndpoint> serviceProvider IServiceProvider Remarks Initializes a new instance of DeleteAccountEndpoint Properties Logger The application's logger. public ILogger<DeleteAccountEndpoint> Logger { get; } Property Value ILogger<DeleteAccountEndpoint> ServiceProvider The application's service provider. public IServiceProvider ServiceProvider { get; set; } Property Value IServiceProvider Methods HandleAsync(CancellationToken) [HttpDelete(\"/account/delete\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ActionResult>"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.ForgotPasswordEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.ForgotPasswordEndpoint.html",
    "title": "Class ForgotPasswordEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class ForgotPasswordEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint for resetting the password of a user. public sealed class ForgotPasswordEndpoint : EndpointBaseAsync.WithRequest<ForgotPasswordRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<ForgotPasswordRequest>.WithoutParam.WithActionResult ForgotPasswordEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of ForgotPasswordEndpoint Constructors ForgotPasswordEndpoint(IServiceProvider, ILogger<ForgotPasswordEndpoint>) Exposes an endpoint for resetting the password of a user. public ForgotPasswordEndpoint(IServiceProvider services, ILogger<ForgotPasswordEndpoint> logger) Parameters services IServiceProvider The applications service provider. logger ILogger<ForgotPasswordEndpoint> The application logger Remarks Initializes a new instance of ForgotPasswordEndpoint Properties Logger public ILogger<ForgotPasswordEndpoint> Logger { get; set; } Property Value ILogger<ForgotPasswordEndpoint> Methods HandleAsync(ForgotPasswordRequest, CancellationToken) Allows a user to send a password reset email. [HttpPost(\"/forgotpassword\")] [AllowAnonymous] [ProducesResponseType(204)] [ProducesResponseType(409)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(ForgotPasswordRequest request, CancellationToken cancellationToken = default) Parameters request ForgotPasswordRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.LogoutEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.LogoutEndpoint.html",
    "title": "Class LogoutEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class LogoutEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint for logging out. public sealed class LogoutEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult LogoutEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of LogoutEndpoint Constructors LogoutEndpoint(IServiceProvider, ILogger<LogoutEndpoint>) Exposes an endpoint for logging out. public LogoutEndpoint(IServiceProvider services, ILogger<LogoutEndpoint> logger) Parameters services IServiceProvider The application's service provider. logger ILogger<LogoutEndpoint> The application's logger. Remarks Initializes a new instance of LogoutEndpoint Properties Logger public ILogger<LogoutEndpoint> Logger { get; } Property Value ILogger<LogoutEndpoint> Services public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(CancellationToken) Allows a user to sign out. [HttpPost(\"/logout\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.RefreshEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.RefreshEndpoint.html",
    "title": "Class RefreshEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class RefreshEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint so the user can refresh the bearer token. public class RefreshEndpoint : EndpointBaseAsync.WithRequest<RefreshRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<RefreshRequest>.WithoutParam.WithActionResult RefreshEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of RefreshEndpoint Constructors RefreshEndpoint(IServiceProvider, ILogger<RefreshEndpoint>) Exposes an endpoint so the user can refresh the bearer token. public RefreshEndpoint(IServiceProvider services, ILogger<RefreshEndpoint> logger) Parameters services IServiceProvider The service provider. logger ILogger<RefreshEndpoint> The application's logger. Remarks Initializes a new instance of RefreshEndpoint Methods HandleAsync(RefreshRequest, CancellationToken) Allows a user to refresh the bearer token. [HttpPost(\"/refresh\")] [Authorize(AuthenticationSchemes = \"Bearer\")] public override Task<ActionResult> HandleAsync(RefreshRequest request, CancellationToken cancellationToken = default) Parameters request RefreshRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.RegisterEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.RegisterEndpoint.html",
    "title": "Class RegisterEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class RegisterEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows a user to register. public sealed class RegisterEndpoint : EndpointBaseAsync.WithRequest<RegisterRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<RegisterRequest>.WithoutParam.WithActionResult RegisterEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of RegisterEndpoint Constructors RegisterEndpoint(IServiceProvider, ILogger<RegisterEndpoint>) Exposes an endpoint that allows a user to register. public RegisterEndpoint(IServiceProvider services, ILogger<RegisterEndpoint> logger) Parameters services IServiceProvider The application's service provider. logger ILogger<RegisterEndpoint> The application's logger. Remarks Initializes a new instance of RegisterEndpoint Properties Logger public ILogger<RegisterEndpoint> Logger { get; } Property Value ILogger<RegisterEndpoint> Services public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(RegisterRequest, CancellationToken) Allows a user to register a new user. [HttpPost(\"/register\")] [AllowAnonymous] [ProducesResponseType(201)] [ProducesResponseType(409)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(RegisterRequest request, CancellationToken cancellationToken = default) Parameters request RegisterRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.ResetPasswordEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.ResetPasswordEndpoint.html",
    "title": "Class ResetPasswordEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class ResetPasswordEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow a user to reset their password. public sealed class ResetPasswordEndpoint : EndpointBaseAsync.WithRequest<ResetPasswordRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<ResetPasswordRequest>.WithoutParam.WithActionResult ResetPasswordEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ResetPasswordEndpoint(IServiceProvider, ILogger<ResetPasswordEndpoint>) Exposes an endpoint to allow a user to reset their password. public ResetPasswordEndpoint(IServiceProvider services, ILogger<ResetPasswordEndpoint> logger) Parameters services IServiceProvider The application service provider. logger ILogger<ResetPasswordEndpoint> The logger. Methods HandleAsync(ResetPasswordRequest, CancellationToken) Allows a user to reset their password. [HttpPost(\"/resetpassword\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(ResetPasswordRequest request, CancellationToken cancellationToken = default) Parameters request ResetPasswordRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TokenEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TokenEndpoint.html",
    "title": "Class TokenEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TokenEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to generate a token. public class TokenEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult<TokenResponse> Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult<TokenResponse> TokenEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TokenEndpoint Constructors TokenEndpoint(IServiceProvider, ILogger<TokenEndpoint>) Exposes an endpoint to allow the user to generate a token. public TokenEndpoint(IServiceProvider services, ILogger<TokenEndpoint> logger) Parameters services IServiceProvider The application's service provider. logger ILogger<TokenEndpoint> The application logger. Remarks Initializes a new instance of TokenEndpoint Properties Logger public ILogger<TokenEndpoint> Logger { get; } Property Value ILogger<TokenEndpoint> Services The service provider. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(CancellationToken) Allows a user to generate a Bearer token. [HttpGet(\"/token\")] [Authorize(Policy = \"UserRolePolicy\")] [ProducesResponseType(200)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult<TokenResponse>> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<TokenResponse>> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorAuthoriseEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorAuthoriseEndpoint.html",
    "title": "Class TwoFactorAuthoriseEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorAuthoriseEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows the user to sign in using two factor authentication. public sealed class TwoFactorAuthoriseEndpoint : EndpointBaseAsync.WithRequest<TwoFactorSignInRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TwoFactorSignInRequest>.WithoutParam.WithActionResult TwoFactorAuthoriseEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TwoFactorAuthoriseEndpoint(IServiceProvider, ILogger<TwoFactorAuthoriseEndpoint>) Exposes an endpoint that allows the user to sign in using two factor authentication. public TwoFactorAuthoriseEndpoint(IServiceProvider services, ILogger<TwoFactorAuthoriseEndpoint> logger) Parameters services IServiceProvider logger ILogger<TwoFactorAuthoriseEndpoint> Properties Logger public ILogger<TwoFactorAuthoriseEndpoint> Logger { get; } Property Value ILogger<TwoFactorAuthoriseEndpoint> Services The service provider. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(TwoFactorSignInRequest, CancellationToken) Allows the user to sign in with two factor code. [HttpPost(\"/2fa/authorise\")] [AllowAnonymous] [ProducesResponseType(302)] [ProducesResponseType(401)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(TwoFactorSignInRequest request, CancellationToken cancellationToken = default) Parameters request TwoFactorSignInRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorManageEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorManageEndpoint.html",
    "title": "Class TwoFactorManageEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorManageEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint that allows the user to enable two factor. public sealed class TwoFactorManageEndpoint : EndpointBaseAsync.WithRequest<TwoFactorManageRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TwoFactorManageRequest>.WithoutParam.WithActionResult TwoFactorManageEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TwoFactorManageEndpoint Constructors TwoFactorManageEndpoint(IServiceProvider, ILogger<TwoFactorManageEndpoint>) Exposes an endpoint that allows the user to enable two factor. public TwoFactorManageEndpoint(IServiceProvider services, ILogger<TwoFactorManageEndpoint> logger) Parameters services IServiceProvider The application's service provider. logger ILogger<TwoFactorManageEndpoint> The application's logger. Remarks Initializes a new instance of TwoFactorManageEndpoint Properties Logger public ILogger<TwoFactorManageEndpoint> Logger { get; } Property Value ILogger<TwoFactorManageEndpoint> Services The service provider for the application. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(TwoFactorManageRequest, CancellationToken) Allows a user to enable two factor. [HttpPost(\"/2fa/manage\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(TwoFactorManageRequest request, CancellationToken cancellationToken = default) Parameters request TwoFactorManageRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesEndpoint.html",
    "title": "Class TwoFactorRecoveryCodesEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint which generates two factor recovery codes. public class TwoFactorRecoveryCodesEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult TwoFactorRecoveryCodesEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TwoFactorRecoveryCodesEndpoint Constructors TwoFactorRecoveryCodesEndpoint(IServiceProvider, ILogger<TwoFactorRecoveryCodesEndpoint>) Exposes an endpoint which generates two factor recovery codes. public TwoFactorRecoveryCodesEndpoint(IServiceProvider services, ILogger<TwoFactorRecoveryCodesEndpoint> logger) Parameters services IServiceProvider The application service provider. logger ILogger<TwoFactorRecoveryCodesEndpoint> The application's logger. Remarks Initializes a new instance of TwoFactorRecoveryCodesEndpoint Properties Logger public ILogger<TwoFactorRecoveryCodesEndpoint> Logger { get; } Property Value ILogger<TwoFactorRecoveryCodesEndpoint> Services The application service provider. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(CancellationToken) Allows a user to generate two factor recovery codes. [HttpGet(\"/2fa/codes\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesRedeemEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorRecoveryCodesRedeemEndpoint.html",
    "title": "Class TwoFactorRecoveryCodesRedeemEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesRedeemEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint for redeeming two factor recovery codes. public class TwoFactorRecoveryCodesRedeemEndpoint : EndpointBaseAsync.WithRequest<TwoFactorRecoveryCodesRedeemRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TwoFactorRecoveryCodesRedeemRequest>.WithoutParam.WithActionResult TwoFactorRecoveryCodesRedeemEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TwoFactorRecoveryCodesRedeemEndpoint Constructors TwoFactorRecoveryCodesRedeemEndpoint(IServiceProvider, ILogger<TwoFactorRecoveryCodesEndpoint>) Exposes an endpoint for redeeming two factor recovery codes. public TwoFactorRecoveryCodesRedeemEndpoint(IServiceProvider services, ILogger<TwoFactorRecoveryCodesEndpoint> logger) Parameters services IServiceProvider The application service provider. logger ILogger<TwoFactorRecoveryCodesEndpoint> Rhe application's logger. Remarks Initializes a new instance of TwoFactorRecoveryCodesRedeemEndpoint Properties Logger public ILogger<TwoFactorRecoveryCodesEndpoint> Logger { get; } Property Value ILogger<TwoFactorRecoveryCodesEndpoint> Services The application service provider. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(TwoFactorRecoveryCodesRedeemRequest, CancellationToken) Allows a user to redeem two factor recovery codes. [HttpPost(\"/2fa/redeem\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(TwoFactorRecoveryCodesRedeemRequest request, CancellationToken cancellationToken = default) Parameters request TwoFactorRecoveryCodesRedeemRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorTokenEmailEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.TwoFactorTokenEmailEndpoint.html",
    "title": "Class TwoFactorTokenEmailEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorTokenEmailEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint which sends a 2fa token via email. public sealed class TwoFactorTokenEmailEndpoint : EndpointBaseAsync.WithRequest<TwoFactorTokenEmailRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TwoFactorTokenEmailRequest>.WithoutParam.WithActionResult TwoFactorTokenEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of TwoFactorTokenEmailEndpoint Constructors TwoFactorTokenEmailEndpoint(IServiceProvider, ILogger<TwoFactorTokenEmailEndpoint>) Exposes an endpoint which sends a 2fa token via email. public TwoFactorTokenEmailEndpoint(IServiceProvider services, ILogger<TwoFactorTokenEmailEndpoint> logger) Parameters services IServiceProvider The application service provider. logger ILogger<TwoFactorTokenEmailEndpoint> The application's logger. Remarks Initializes a new instance of TwoFactorTokenEmailEndpoint Properties Logger public ILogger<TwoFactorTokenEmailEndpoint> Logger { get; } Property Value ILogger<TwoFactorTokenEmailEndpoint> Services The application service provider. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(TwoFactorTokenEmailRequest, CancellationToken) Sends a two factor token to the user by email. [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(404)] [ProducesResponseType(500)] [HttpPost(\"/2fa/email\")] public override Task<ActionResult> HandleAsync(TwoFactorTokenEmailRequest request, CancellationToken cancellationToken = default) Parameters request TwoFactorTokenEmailRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.UpdateEmailEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.UpdateEmailEndpoint.html",
    "title": "Class UpdateEmailEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class UpdateEmailEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to update their email. public class UpdateEmailEndpoint : EndpointBaseAsync.WithRequest<UpdateEmailRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdateEmailRequest>.WithoutParam.WithActionResult UpdateEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of UpdateEmailEndpoint Constructors UpdateEmailEndpoint(IServiceProvider, ILogger<UpdateEmailEndpoint>) Exposes an endpoint to allow the user to update their email. public UpdateEmailEndpoint(IServiceProvider services, ILogger<UpdateEmailEndpoint> logger) Parameters services IServiceProvider logger ILogger<UpdateEmailEndpoint> Remarks Initializes a new instance of UpdateEmailEndpoint Properties Logger The application's logger. public ILogger<UpdateEmailEndpoint> Logger { get; } Property Value ILogger<UpdateEmailEndpoint> Services The application service provider. public IServiceProvider Services { get; set; } Property Value IServiceProvider Methods HandleAsync(UpdateEmailRequest, CancellationToken) Allows a user to update their email address. [HttpPost(\"/account/email\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(UpdateEmailRequest request, CancellationToken cancellationToken = default) Parameters request UpdateEmailRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePasswordEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePasswordEndpoint.html",
    "title": "Class UpdatePasswordEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePasswordEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to update their password. public class UpdatePasswordEndpoint : EndpointBaseAsync.WithRequest<UpdatePasswordRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdatePasswordRequest>.WithoutParam.WithActionResult UpdatePasswordEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of UpdatePasswordEndpoint Constructors UpdatePasswordEndpoint(IServiceProvider, ILogger<UpdatePasswordEndpoint>) Exposes an endpoint to allow the user to update their password. public UpdatePasswordEndpoint(IServiceProvider services, ILogger<UpdatePasswordEndpoint> logger) Parameters services IServiceProvider logger ILogger<UpdatePasswordEndpoint> Remarks Initializes a new instance of UpdatePasswordEndpoint Properties Logger The application's logger. public ILogger<UpdatePasswordEndpoint> Logger { get; } Property Value ILogger<UpdatePasswordEndpoint> Services The application service provider. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(UpdatePasswordRequest, CancellationToken) Allows a user to update their password. [HttpPost(\"/account/password\")] [Authorize(AuthenticationSchemes = \"Bearer\")] public override Task<ActionResult> HandleAsync(UpdatePasswordRequest request, CancellationToken cancellationToken = default) Parameters request UpdatePasswordRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePhoneNumberEndpoint.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.UpdatePhoneNumberEndpoint.html",
    "title": "Class UpdatePhoneNumberEndpoint | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePhoneNumberEndpoint Namespace ChristopherBriddock.Service.Identity.Endpoints Assembly ChristopherBriddock.Service.Identity.dll Exposes an endpoint to allow the user to update their phone number. public class UpdatePhoneNumberEndpoint : EndpointBaseAsync.WithRequest<UpdatePhoneNumberRequest>.WithoutParam.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdatePhoneNumberRequest>.WithoutParam.WithActionResult UpdatePhoneNumberEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of UpdatePhoneNumberEndpoint Constructors UpdatePhoneNumberEndpoint(IServiceProvider, ILogger<UpdatePhoneNumberEndpoint>) Exposes an endpoint to allow the user to update their phone number. public UpdatePhoneNumberEndpoint(IServiceProvider services, ILogger<UpdatePhoneNumberEndpoint> logger) Parameters services IServiceProvider logger ILogger<UpdatePhoneNumberEndpoint> Remarks Initializes a new instance of UpdatePhoneNumberEndpoint Properties Logger The application logger. public ILogger<UpdatePhoneNumberEndpoint> Logger { get; } Property Value ILogger<UpdatePhoneNumberEndpoint> Services The application service provider. public IServiceProvider Services { get; } Property Value IServiceProvider Methods HandleAsync(UpdatePhoneNumberRequest, CancellationToken) Allows a user to update their email address. [HttpPost(\"/account/phonenumber\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(404)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(UpdatePhoneNumberRequest request, CancellationToken cancellationToken = default) Parameters request UpdatePhoneNumberRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/ChristopherBriddock.Service.Identity.Endpoints.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Endpoints.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Endpoints | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Endpoints Classes AuthoriseEndpoint Exposes an endpoint for authorizing a user. ConfirmEmailEndpoint An endpoint which allows confirming the users email address. DeleteAccountEndpoint Exposes an endpoint that allows the user to enable two factor. ForgotPasswordEndpoint Exposes an endpoint for resetting the password of a user. LogoutEndpoint Exposes an endpoint for logging out. RefreshEndpoint Exposes an endpoint so the user can refresh the bearer token. RegisterEndpoint Exposes an endpoint that allows a user to register. ResetPasswordEndpoint Exposes an endpoint to allow a user to reset their password. TokenEndpoint Exposes an endpoint to allow the user to generate a token. TwoFactorAuthoriseEndpoint Exposes an endpoint that allows the user to sign in using two factor authentication. TwoFactorManageEndpoint Exposes an endpoint that allows the user to enable two factor. TwoFactorRecoveryCodesEndpoint Exposes an endpoint which generates two factor recovery codes. TwoFactorRecoveryCodesRedeemEndpoint Exposes an endpoint for redeeming two factor recovery codes. TwoFactorTokenEmailEndpoint Exposes an endpoint which sends a 2fa token via email. UpdateEmailEndpoint Exposes an endpoint to allow the user to update their email. UpdatePasswordEndpoint Exposes an endpoint to allow the user to update their password. UpdatePhoneNumberEndpoint Exposes an endpoint to allow the user to update their phone number."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.CreateJwtException.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.CreateJwtException.html",
    "title": "Class CreateJwtException | ChristopherBriddock.Identity",
    "keywords": "Class CreateJwtException Namespace ChristopherBriddock.Service.Identity.Exceptions Assembly ChristopherBriddock.Service.Identity.dll Exception class for errors related to creating JSON Web Tokens (JWT). public class CreateJwtException : Exception, ISerializable Inheritance object Exception CreateJwtException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CreateJwtException() Initializes a new instance of the CreateJwtException class. public CreateJwtException() CreateJwtException(string) Initializes a new instance of the CreateJwtException class with a specified error message. public CreateJwtException(string message) Parameters message string The error message that describes the exception. CreateJwtException(string, Exception) Initializes a new instance of the CreateJwtException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CreateJwtException(string message, Exception inner) Parameters message string The error message that describes the exception. inner Exception The inner exception that caused this exception."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.JwtSecretNullOrEmptyException.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.JwtSecretNullOrEmptyException.html",
    "title": "Class JwtSecretNullOrEmptyException | ChristopherBriddock.Identity",
    "keywords": "Class JwtSecretNullOrEmptyException Namespace ChristopherBriddock.Service.Identity.Exceptions Assembly ChristopherBriddock.Service.Identity.dll Exception class for errors related to the JWT secret being null or empty. public class JwtSecretNullOrEmptyException : Exception, ISerializable Inheritance object Exception JwtSecretNullOrEmptyException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JwtSecretNullOrEmptyException() Initializes a new instance of the JwtSecretNullOrEmptyException class. public JwtSecretNullOrEmptyException() JwtSecretNullOrEmptyException(string?) Initializes a new instance of the JwtSecretNullOrEmptyException class with a specified error message. public JwtSecretNullOrEmptyException(string? message) Parameters message string The error message that describes the exception. JwtSecretNullOrEmptyException(string?, Exception?) Initializes a new instance of the JwtSecretNullOrEmptyException class with a specified error message and a reference to the inner exception that is the cause of this exception. public JwtSecretNullOrEmptyException(string? message, Exception? innerException) Parameters message string The error message that describes the exception. innerException Exception The inner exception that caused this exception."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.ValidateJwtException.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.ValidateJwtException.html",
    "title": "Class ValidateJwtException | ChristopherBriddock.Identity",
    "keywords": "Class ValidateJwtException Namespace ChristopherBriddock.Service.Identity.Exceptions Assembly ChristopherBriddock.Service.Identity.dll Exception class for errors related to validating JSON Web Tokens (JWT). public class ValidateJwtException : Exception, ISerializable Inheritance object Exception ValidateJwtException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ValidateJwtException() Initializes a new instance of the ValidateJwtException class. public ValidateJwtException() ValidateJwtException(string) Initializes a new instance of the ValidateJwtException class with a specified error message. public ValidateJwtException(string message) Parameters message string The error message that describes the exception. ValidateJwtException(string, Exception) Initializes a new instance of the ValidateJwtException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ValidateJwtException(string message, Exception inner) Parameters message string The error message that describes the exception. inner Exception The inner exception that caused this exception."
  },
  "api/ChristopherBriddock.Service.Identity.Exceptions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Exceptions.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Exceptions | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Exceptions Classes CreateJwtException Exception class for errors related to creating JSON Web Tokens (JWT). JwtSecretNullOrEmptyException Exception class for errors related to the JWT secret being null or empty. ValidateJwtException Exception class for errors related to validating JSON Web Tokens (JWT)."
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.HealthCheckExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.HealthCheckExtensions.html",
    "title": "Class HealthCheckExtensions | ChristopherBriddock.Identity",
    "keywords": "Class HealthCheckExtensions Namespace ChristopherBriddock.Service.Identity.Extensions Assembly ChristopherBriddock.Service.Identity.dll Health check related extension methods. public static class HealthCheckExtensions Inheritance object HealthCheckExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCustomHealthChecks(IServiceCollection) Adds health checks for vital infrastructure such as Databases, Caches and Logging. public static IServiceCollection AddCustomHealthChecks(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which authentication services will be added. Returns IServiceCollection The modified IServiceCollection instance. UseCustomHealthCheckMapping(IEndpointRouteBuilder) Maps a custom health check endpoint to the specified route. public static IEndpointRouteBuilder UseCustomHealthCheckMapping(this IEndpointRouteBuilder app) Parameters app IEndpointRouteBuilder The IEndpointRouteBuilder to which the health check mapping is added. Returns IEndpointRouteBuilder The IEndpointRouteBuilder for further configuration."
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | ChristopherBriddock.Identity",
    "keywords": "Class ServiceCollectionExtensions Namespace ChristopherBriddock.Service.Identity.Extensions Assembly ChristopherBriddock.Service.Identity.dll Extension methods for the IServiceCollection public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAzureAppInsights(IServiceCollection) Adds Azure Application Insights, if enabled. public static IServiceCollection AddAzureAppInsights(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddCache(IServiceCollection) Add the required services for in-memory and redis services, if redis is enabled in the feature flags. public static IServiceCollection AddCache(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddCrossOriginPolicy(IServiceCollection) Add cross origin policy. public static IServiceCollection AddCrossOriginPolicy(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. Remarks This is only enabled in development, by the middleware UseCors(IApplicationBuilder) AddCustomAuthentication(IServiceCollection) Extension method for adding authentication services to the IServiceCollection. public static IServiceCollection AddCustomAuthentication(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddCustomAuthorization(IServiceCollection) Adds custom authorization policy. public static IServiceCollection AddCustomAuthorization(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddCustomSession(IServiceCollection) Adds session support to the application. public static IServiceCollection AddCustomSession(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddIdentity(IServiceCollection) Adds the ASP.NET Identity configuration. public static IServiceCollection AddIdentity(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection instance. Returns IServiceCollection The modified IServiceCollection instance. AddPublisherMessaging(IServiceCollection) Adds publisher messaging for rabbitmq or azure service bus. public static IServiceCollection AddPublisherMessaging(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddSwagger(IServiceCollection, string) Adds Swagger with custom configuration. public static IServiceCollection AddSwagger(this IServiceCollection services, string xmlFile) Parameters services IServiceCollection The IServiceCollection instance. xmlFile string Returns IServiceCollection The modified IServiceCollection instance."
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.WebApplicationExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.WebApplicationExtensions.html",
    "title": "Class WebApplicationExtensions | ChristopherBriddock.Identity",
    "keywords": "Class WebApplicationExtensions Namespace ChristopherBriddock.Service.Identity.Extensions Assembly ChristopherBriddock.Service.Identity.dll Extensions for IApplicationBuilder public static class WebApplicationExtensions Inheritance object WebApplicationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseDatabaseMigrationsAsync<TDbContext>(WebApplication) Automatically applies pending database migrations. public static Task<IApplicationBuilder> UseDatabaseMigrationsAsync<TDbContext>(this WebApplication app) where TDbContext : DbContext Parameters app WebApplication Returns Task<IApplicationBuilder> The modified WebApplication instance. Type Parameters TDbContext"
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.WebHostBuilderExtensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.WebHostBuilderExtensions.html",
    "title": "Class WebHostBuilderExtensions | ChristopherBriddock.Identity",
    "keywords": "Class WebHostBuilderExtensions Namespace ChristopherBriddock.Service.Identity.Extensions Assembly ChristopherBriddock.Service.Identity.dll Extensions methods for the IWebHostBuilder public static class WebHostBuilderExtensions Inheritance object WebHostBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddKestrelConfiguration(IWebHostBuilder, int) Adds Kestrel server configuration to the web host builder. public static void AddKestrelConfiguration(this IWebHostBuilder webHostBuilder, int portNumber) Parameters webHostBuilder IWebHostBuilder The IWebHostBuilder instance. portNumber int"
  },
  "api/ChristopherBriddock.Service.Identity.Extensions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Extensions.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Extensions | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Extensions Classes HealthCheckExtensions Health check related extension methods. ServiceCollectionExtensions Extension methods for the IServiceCollection WebApplicationExtensions Extensions for IApplicationBuilder WebHostBuilderExtensions Extensions methods for the IWebHostBuilder"
  },
  "api/ChristopherBriddock.Service.Identity.Models.ApplicationRole.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.ApplicationRole.html",
    "title": "Class ApplicationRole | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationRole Namespace ChristopherBriddock.Service.Identity.Models Assembly ChristopherBriddock.Service.Identity.dll Represents a role in the identity system public sealed class ApplicationRole : IdentityRole<Guid> Inheritance object IdentityRole<Guid> ApplicationRole Inherited Members IdentityRole<Guid>.ToString() IdentityRole<Guid>.Name IdentityRole<Guid>.NormalizedName IdentityRole<Guid>.ConcurrencyStamp object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Id Gets or sets the primary key for this role. [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public override Guid Id { get; set; } Property Value Guid"
  },
  "api/ChristopherBriddock.Service.Identity.Models.ApplicationRoleClaim.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.ApplicationRoleClaim.html",
    "title": "Class ApplicationRoleClaim | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationRoleClaim Namespace ChristopherBriddock.Service.Identity.Models Assembly ChristopherBriddock.Service.Identity.dll Represents a claim that is granted to all users within a role. public sealed class ApplicationRoleClaim : IdentityRoleClaim<Guid> Inheritance object IdentityRoleClaim<Guid> ApplicationRoleClaim Inherited Members IdentityRoleClaim<Guid>.ToClaim() IdentityRoleClaim<Guid>.InitializeFromClaim(Claim) IdentityRoleClaim<Guid>.Id IdentityRoleClaim<Guid>.RoleId IdentityRoleClaim<Guid>.ClaimType IdentityRoleClaim<Guid>.ClaimValue object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Models.ApplicationUser.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.ApplicationUser.html",
    "title": "Class ApplicationUser | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUser Namespace ChristopherBriddock.Service.Identity.Models Assembly ChristopherBriddock.Service.Identity.dll Represents a user in the identity system public sealed class ApplicationUser : IdentityUser<Guid> Inheritance object IdentityUser<Guid> ApplicationUser Inherited Members IdentityUser<Guid>.ToString() IdentityUser<Guid>.UserName IdentityUser<Guid>.NormalizedUserName IdentityUser<Guid>.Email IdentityUser<Guid>.NormalizedEmail IdentityUser<Guid>.EmailConfirmed IdentityUser<Guid>.PasswordHash IdentityUser<Guid>.SecurityStamp IdentityUser<Guid>.ConcurrencyStamp IdentityUser<Guid>.PhoneNumber IdentityUser<Guid>.PhoneNumberConfirmed IdentityUser<Guid>.TwoFactorEnabled IdentityUser<Guid>.LockoutEnd IdentityUser<Guid>.LockoutEnabled IdentityUser<Guid>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties DeletedDateTime Gets or sets the deleted date of the account. public DateTime DeletedDateTime { get; set; } Property Value DateTime Id Gets or sets the primary key for this user. [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public override Guid Id { get; set; } Property Value Guid IsDeleted Gets or sets whether the user is soft deleted. public bool IsDeleted { get; set; } Property Value bool"
  },
  "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserClaims.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserClaims.html",
    "title": "Class ApplicationUserClaims | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserClaims Namespace ChristopherBriddock.Service.Identity.Models Assembly ChristopherBriddock.Service.Identity.dll Represents a claim that a user possesses. public class ApplicationUserClaims : IdentityUserClaim<Guid> Inheritance object IdentityUserClaim<Guid> ApplicationUserClaims Inherited Members IdentityUserClaim<Guid>.ToClaim() IdentityUserClaim<Guid>.InitializeFromClaim(Claim) IdentityUserClaim<Guid>.Id IdentityUserClaim<Guid>.UserId IdentityUserClaim<Guid>.ClaimType IdentityUserClaim<Guid>.ClaimValue object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserLogin.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserLogin.html",
    "title": "Class ApplicationUserLogin | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserLogin Namespace ChristopherBriddock.Service.Identity.Models Assembly ChristopherBriddock.Service.Identity.dll Represents a login and its associated provider for a user. public class ApplicationUserLogin : IdentityUserLogin<Guid> Inheritance object IdentityUserLogin<Guid> ApplicationUserLogin Inherited Members IdentityUserLogin<Guid>.LoginProvider IdentityUserLogin<Guid>.ProviderKey IdentityUserLogin<Guid>.ProviderDisplayName IdentityUserLogin<Guid>.UserId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserRole.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserRole.html",
    "title": "Class ApplicationUserRole | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserRole Namespace ChristopherBriddock.Service.Identity.Models Assembly ChristopherBriddock.Service.Identity.dll Represents the link between a user and a role. public class ApplicationUserRole : IdentityUserRole<Guid> Inheritance object IdentityUserRole<Guid> ApplicationUserRole Inherited Members IdentityUserRole<Guid>.UserId IdentityUserRole<Guid>.RoleId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserToken.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.ApplicationUserToken.html",
    "title": "Class ApplicationUserToken | ChristopherBriddock.Identity",
    "keywords": "Class ApplicationUserToken Namespace ChristopherBriddock.Service.Identity.Models Assembly ChristopherBriddock.Service.Identity.dll Represents an authentication token for a user. public sealed class ApplicationUserToken : IdentityUserToken<Guid> Inheritance object IdentityUserToken<Guid> ApplicationUserToken Inherited Members IdentityUserToken<Guid>.UserId IdentityUserToken<Guid>.LoginProvider IdentityUserToken<Guid>.Name IdentityUserToken<Guid>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.AuthorizeRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.AuthorizeRequest.html",
    "title": "Class AuthorizeRequest | ChristopherBriddock.Identity",
    "keywords": "Class AuthorizeRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a request for authorization. public sealed record AuthorizeRequest : IEquatable<AuthorizeRequest> Inheritance object AuthorizeRequest Implements IEquatable<AuthorizeRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress Gets or sets the email address associated with the user. public required string EmailAddress { get; set; } Property Value string Remarks This field is required for user identification. Password Gets or sets the password associated with the user. public required string Password { get; set; } Property Value string Remarks This field is required for user authentication. RememberMe Gets or sets a value indicating whether the user's session should be remembered. public required bool RememberMe { get; set; } Property Value bool Remarks Setting this to true will remember the user's session across browser sessions."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.ConfirmEmailRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.ConfirmEmailRequest.html",
    "title": "Class ConfirmEmailRequest | ChristopherBriddock.Identity",
    "keywords": "Class ConfirmEmailRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents an email confirmation. public sealed record ConfirmEmailRequest : IEquatable<ConfirmEmailRequest> Inheritance object ConfirmEmailRequest Implements IEquatable<ConfirmEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code The code to confirm the email address public required string Code { get; set; } Property Value string EmailAddress The users email address public required string EmailAddress { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.ForgotPasswordRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.ForgotPasswordRequest.html",
    "title": "Class ForgotPasswordRequest | ChristopherBriddock.Identity",
    "keywords": "Class ForgotPasswordRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a forgot password request. public sealed record ForgotPasswordRequest : IEquatable<ForgotPasswordRequest> Inheritance object ForgotPasswordRequest Implements IEquatable<ForgotPasswordRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress Gets or sets the email address. public required string EmailAddress { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.RefreshRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.RefreshRequest.html",
    "title": "Class RefreshRequest | ChristopherBriddock.Identity",
    "keywords": "Class RefreshRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a refresh request. public sealed record RefreshRequest : IEquatable<RefreshRequest> Inheritance object RefreshRequest Implements IEquatable<RefreshRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties RefreshToken The refresh token. public required string RefreshToken { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.RegisterRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.RegisterRequest.html",
    "title": "Class RegisterRequest | ChristopherBriddock.Identity",
    "keywords": "Class RegisterRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a user registering for the application. public sealed record RegisterRequest : IEquatable<RegisterRequest> Inheritance object RegisterRequest Implements IEquatable<RegisterRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress The user's email address. public required string EmailAddress { get; set; } Property Value string Password The user's password. public required string Password { get; set; } Property Value string PhoneNumber The user's phone number. public required string PhoneNumber { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorManageRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorManageRequest.html",
    "title": "Class TwoFactorManageRequest | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorManageRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represent a users two factor request to enable or disable the feature. public sealed record TwoFactorManageRequest : IEquatable<TwoFactorManageRequest> Inheritance object TwoFactorManageRequest Implements IEquatable<TwoFactorManageRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsEnabled Gets or sets the isEnabled flag. public bool IsEnabled { get; set; } Property Value bool"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorRecoveryCodesRedeemRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorRecoveryCodesRedeemRequest.html",
    "title": "Class TwoFactorRecoveryCodesRedeemRequest | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorRecoveryCodesRedeemRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a two factor recovery code redeem request. public sealed record TwoFactorRecoveryCodesRedeemRequest : IEquatable<TwoFactorRecoveryCodesRedeemRequest> Inheritance object TwoFactorRecoveryCodesRedeemRequest Implements IEquatable<TwoFactorRecoveryCodesRedeemRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code The two factor recovery code. public string Code { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorSignInRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorSignInRequest.html",
    "title": "Class TwoFactorSignInRequest | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorSignInRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a two factor sign in request. public sealed record TwoFactorSignInRequest : IEquatable<TwoFactorSignInRequest> Inheritance object TwoFactorSignInRequest Implements IEquatable<TwoFactorSignInRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Token The two factor token public string Token { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorTokenEmailRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.TwoFactorTokenEmailRequest.html",
    "title": "Class TwoFactorTokenEmailRequest | ChristopherBriddock.Identity",
    "keywords": "Class TwoFactorTokenEmailRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a token email request. public sealed record TwoFactorTokenEmailRequest : IEquatable<TwoFactorTokenEmailRequest> Inheritance object TwoFactorTokenEmailRequest Implements IEquatable<TwoFactorTokenEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email The user's email address. public string Email { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdateEmailRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdateEmailRequest.html",
    "title": "Class UpdateEmailRequest | ChristopherBriddock.Identity",
    "keywords": "Class UpdateEmailRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a user email request. public sealed record UpdateEmailRequest : IEquatable<UpdateEmailRequest> Inheritance object UpdateEmailRequest Implements IEquatable<UpdateEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress The new email address. public string EmailAddress { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePasswordRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePasswordRequest.html",
    "title": "Class UpdatePasswordRequest | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePasswordRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a password update request. public sealed record UpdatePasswordRequest : IEquatable<UpdatePasswordRequest> Inheritance object UpdatePasswordRequest Implements IEquatable<UpdatePasswordRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CurrentPassword The user's current password. public required string CurrentPassword { get; set; } Property Value string NewPassword The user's new password. public required string NewPassword { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePhoneNumberRequest.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.UpdatePhoneNumberRequest.html",
    "title": "Class UpdatePhoneNumberRequest | ChristopherBriddock.Identity",
    "keywords": "Class UpdatePhoneNumberRequest Namespace ChristopherBriddock.Service.Identity.Models.Requests Assembly ChristopherBriddock.Service.Identity.dll Represents a user's phone number, which is to be updated. public sealed record UpdatePhoneNumberRequest : IEquatable<UpdatePhoneNumberRequest> Inheritance object UpdatePhoneNumberRequest Implements IEquatable<UpdatePhoneNumberRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties PhoneNumber The new phone number. public string PhoneNumber { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Requests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Requests.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models.Requests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models.Requests Classes AuthorizeRequest Represents a request for authorization. ConfirmEmailRequest Represents an email confirmation. ForgotPasswordRequest Represents a forgot password request. RefreshRequest Represents a refresh request. RegisterRequest Represents a user registering for the application. TwoFactorManageRequest Represent a users two factor request to enable or disable the feature. TwoFactorRecoveryCodesRedeemRequest Represents a two factor recovery code redeem request. TwoFactorSignInRequest Represents a two factor sign in request. TwoFactorTokenEmailRequest Represents a token email request. UpdateEmailRequest Represents a user email request. UpdatePasswordRequest Represents a password update request. UpdatePhoneNumberRequest Represents a user's phone number, which is to be updated."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Responses.TokenResponse.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Responses.TokenResponse.html",
    "title": "Class TokenResponse | ChristopherBriddock.Identity",
    "keywords": "Class TokenResponse Namespace ChristopherBriddock.Service.Identity.Models.Responses Assembly ChristopherBriddock.Service.Identity.dll Represents the response when a user is authorized. public sealed record TokenResponse : IEquatable<TokenResponse> Inheritance object TokenResponse Implements IEquatable<TokenResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken Gets or sets the access token. public required string AccessToken { get; set; } Property Value string Expires Gets or sets the expiration of the token. public required string Expires { get; set; } Property Value string RefreshToken Gets or sets the refresh token. public required string RefreshToken { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Responses.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Responses.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models.Responses | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models.Responses Classes TokenResponse Represents the response when a user is authorized."
  },
  "api/ChristopherBriddock.Service.Identity.Models.Results.JwtResult.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Results.JwtResult.html",
    "title": "Class JwtResult | ChristopherBriddock.Identity",
    "keywords": "Class JwtResult Namespace ChristopherBriddock.Service.Identity.Models.Results Assembly ChristopherBriddock.Service.Identity.dll Represents the result of a JWT (JSON Web Token) operation. public sealed class JwtResult Inheritance object JwtResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Error Gets or sets an optional error message in case the JWT operation encountered an error. public string? Error { get; set; } Property Value string Success Gets or sets a value indicating whether the JWT operation was successful. public bool Success { get; set; } Property Value bool Token Gets or sets the JWT (JSON Web Token) string if the operation was successful. public string Token { get; set; } Property Value string"
  },
  "api/ChristopherBriddock.Service.Identity.Models.Results.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.Results.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models.Results | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models.Results Classes JwtResult Represents the result of a JWT (JSON Web Token) operation."
  },
  "api/ChristopherBriddock.Service.Identity.Models.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Models.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Models | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Models Classes ApplicationRole Represents a role in the identity system ApplicationRoleClaim Represents a claim that is granted to all users within a role. ApplicationUser Represents a user in the identity system ApplicationUserClaims Represents a claim that a user possesses. ApplicationUserLogin Represents a login and its associated provider for a user. ApplicationUserRole Represents the link between a user and a role. ApplicationUserToken Represents an authentication token for a user."
  },
  "api/ChristopherBriddock.Service.Identity.Options.ConfigureJwtBearerOptions.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Options.ConfigureJwtBearerOptions.html",
    "title": "Class ConfigureJwtBearerOptions | ChristopherBriddock.Identity",
    "keywords": "Class ConfigureJwtBearerOptions Namespace ChristopherBriddock.Service.Identity.Options Assembly ChristopherBriddock.Service.Identity.dll Configures JWT Bearer authentication options using the Options pattern. public sealed class ConfigureJwtBearerOptions : IConfigureNamedOptions<JwtBearerOptions>, IConfigureOptions<JwtBearerOptions> Inheritance object ConfigureJwtBearerOptions Implements IConfigureNamedOptions<JwtBearerOptions> IConfigureOptions<JwtBearerOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of the ConfigureJwtBearerOptions class. Constructors ConfigureJwtBearerOptions(IConfiguration) Configures JWT Bearer authentication options using the Options pattern. public ConfigureJwtBearerOptions(IConfiguration configuration) Parameters configuration IConfiguration The application configuration. Remarks Initializes a new instance of the ConfigureJwtBearerOptions class. Methods Configure(JwtBearerOptions) Configures JWT Bearer options. public void Configure(JwtBearerOptions options) Parameters options JwtBearerOptions The JWT Bearer authentication options to configure. Configure(string?, JwtBearerOptions) Configures JWT Bearer options. public void Configure(string? name, JwtBearerOptions options) Parameters name string The name of the options. options JwtBearerOptions The JWT Bearer authentication options to configure."
  },
  "api/ChristopherBriddock.Service.Identity.Options.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Options.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Options | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Options Classes ConfigureJwtBearerOptions Configures JWT Bearer authentication options using the Options pattern."
  },
  "api/ChristopherBriddock.Service.Identity.Program.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Program.html",
    "title": "Class Program | ChristopherBriddock.Identity",
    "keywords": "Class Program Namespace ChristopherBriddock.Service.Identity Assembly ChristopherBriddock.Service.Identity.dll The entry point for the Web Application. public sealed class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ChristopherBriddock.Service.Identity.Providers.IJsonWebTokenProvider.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Providers.IJsonWebTokenProvider.html",
    "title": "Interface IJsonWebTokenProvider | ChristopherBriddock.Identity",
    "keywords": "Interface IJsonWebTokenProvider Namespace ChristopherBriddock.Service.Identity.Providers Assembly ChristopherBriddock.Service.Identity.dll Provides a contract for the JWT Token Provider implementation JsonWebTokenProvider public interface IJsonWebTokenProvider Methods TryCreateRefreshTokenAsync(string, string, string, string, string, string) Tries to create a JWT (JSON Web Token) asynchronously. Task<JwtResult> TryCreateRefreshTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires string The expiration date and time of the JWT. subject string The subject of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryCreateTokenAsync(string, string, string, string, string, string) Tries to create a new refresh JWT (JSON Web Token) asynchronously. Task<JwtResult> TryCreateTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string jwtSecret string issuer string audience string expires string subject string Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryValidateTokenAsync(string, string, string, string) Tries to validate a JWT (JSON Web Token) asynchronously. Task<JwtResult> TryValidateTokenAsync(string token, string jwtSecret, string issuer, string audience) Parameters token string The JWT to validate. jwtSecret string The secret key used to validate the JWT's signature. issuer string The expected issuer of the JWT. audience string The expected audience of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token validation."
  },
  "api/ChristopherBriddock.Service.Identity.Providers.JsonWebTokenProvider.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Providers.JsonWebTokenProvider.html",
    "title": "Class JsonWebTokenProvider | ChristopherBriddock.Identity",
    "keywords": "Class JsonWebTokenProvider Namespace ChristopherBriddock.Service.Identity.Providers Assembly ChristopherBriddock.Service.Identity.dll Represents a service for managing JSON Web Tokens. This includes creating, refreshing and validating JSON Web Tokens. public class JsonWebTokenProvider : IJsonWebTokenProvider Inheritance object JsonWebTokenProvider Implements IJsonWebTokenProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryCreateRefreshTokenAsync(string, string, string, string, string, string) Tries to create a new refresh JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryCreateRefreshTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string jwtSecret string issuer string audience string expires string subject string Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryCreateTokenAsync(string, string, string, string, string, string) Tries to create a JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryCreateTokenAsync(string email, string jwtSecret, string issuer, string audience, string expires, string subject) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires string The expiration date and time of the JWT. subject string The subject of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryValidateTokenAsync(string, string, string, string) Tries to validate a JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryValidateTokenAsync(string token, string jwtSecret, string issuer, string audience) Parameters token string The JWT to validate. jwtSecret string The secret key used to validate the JWT's signature. issuer string The expected issuer of the JWT. audience string The expected audience of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token validation."
  },
  "api/ChristopherBriddock.Service.Identity.Providers.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Providers.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Providers | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Providers Classes JsonWebTokenProvider Represents a service for managing JSON Web Tokens. This includes creating, refreshing and validating JSON Web Tokens. Interfaces IJsonWebTokenProvider Provides a contract for the JWT Token Provider implementation JsonWebTokenProvider"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.EmailPublisher.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.EmailPublisher.html",
    "title": "Class EmailPublisher | ChristopherBriddock.Identity",
    "keywords": "Class EmailPublisher Namespace ChristopherBriddock.Service.Identity.Publishers Assembly ChristopherBriddock.Service.Identity.dll Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. public sealed class EmailPublisher : IEmailPublisher Inheritance object EmailPublisher Implements IEmailPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Initalizes a new instance of EmailPublisher Constructors EmailPublisher(IServiceProvider) Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. public EmailPublisher(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Remarks Initalizes a new instance of EmailPublisher Properties ServiceProvider The application's service provider public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. public Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.IEmailPublisher.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.IEmailPublisher.html",
    "title": "Interface IEmailPublisher | ChristopherBriddock.Identity",
    "keywords": "Interface IEmailPublisher Namespace ChristopherBriddock.Service.Identity.Publishers Assembly ChristopherBriddock.Service.Identity.dll Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. public interface IEmailPublisher Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.NullEmailPublisher.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.NullEmailPublisher.html",
    "title": "Class NullEmailPublisher | ChristopherBriddock.Identity",
    "keywords": "Class NullEmailPublisher Namespace ChristopherBriddock.Service.Identity.Publishers Assembly ChristopherBriddock.Service.Identity.dll This is a null implementation of IEmailPublisher Allows for the system to be tested without needing a message queue available. This will mean that the system will no longer be able to send emails for registration confirmation, two factor authentication and forgot password, but this is only when the Feature Flag for RabbitMq or Azure Service Bus is disabled. public class NullEmailPublisher : IEmailPublisher Inheritance object NullEmailPublisher Implements IEmailPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. public Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/ChristopherBriddock.Service.Identity.Publishers.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Publishers.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Publishers | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Publishers Classes EmailPublisher Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes. NullEmailPublisher This is a null implementation of IEmailPublisher Allows for the system to be tested without needing a message queue available. This will mean that the system will no longer be able to send emails for registration confirmation, two factor authentication and forgot password, but this is only when the Feature Flag for RabbitMq or Azure Service Bus is disabled. Interfaces IEmailPublisher Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and two factor codes."
  },
  "api/ChristopherBriddock.Service.Identity.Services.AccountPurgeBackgroundService.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Services.AccountPurgeBackgroundService.html",
    "title": "Class AccountPurgeBackgroundService | ChristopherBriddock.Identity",
    "keywords": "Class AccountPurgeBackgroundService Namespace ChristopherBriddock.Service.Identity.Services Assembly ChristopherBriddock.Service.Identity.dll This backround service deletes old user account marked as deleted after five years. public class AccountPurgeBackgroundService : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService AccountPurgeBackgroundService Implements IHostedService IDisposable Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountPurgeBackgroundService(AppDbContext) This backround service deletes old user account marked as deleted after five years. public AccountPurgeBackgroundService(AppDbContext appDbContext) Parameters appDbContext AppDbContext The application's database context Properties AppDbContext The application's database context. public AppDbContext AppDbContext { get; } Property Value AppDbContext Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/ChristopherBriddock.Service.Identity.Services.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Services.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Services | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Services Classes AccountPurgeBackgroundService This backround service deletes old user account marked as deleted after five years."
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AuthoriseEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.AuthoriseEndpointTests.html",
    "title": "Class AuthoriseEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class AuthoriseEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class AuthoriseEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object AuthoriseEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthoriseEndpointTests(WebApplicationFactory<Program>) public AuthoriseEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods AuthoriseEndpoint_ReturnsStatus302Found_WhenTwoFactorIsEnabled() [Fact] public Task AuthoriseEndpoint_ReturnsStatus302Found_WhenTwoFactorIsEnabled() Returns Task AuthoriseEndpoint_ReturnsStatus302Found_WhenValidCredentialsAreUsed() [Fact] public Task AuthoriseEndpoint_ReturnsStatus302Found_WhenValidCredentialsAreUsed() Returns Task AuthoriseEndpoint_ReturnsStatus401Unauthorized_WhenUseInvalidValidCredentials() Test [Fact] public Task AuthoriseEndpoint_ReturnsStatus401Unauthorized_WhenUseInvalidValidCredentials() Returns Task AuthoriseEndpoint_ReturnsStatus500InternalServerError_WhenExceptionIsThrown() Test [Fact] public Task AuthoriseEndpoint_ReturnsStatus500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ConfirmEmailEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ConfirmEmailEndpointTests.html",
    "title": "Class ConfirmEmailEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class ConfirmEmailEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class ConfirmEmailEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object ConfirmEmailEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConfirmEmailEndpointTests(WebApplicationFactory<Program>) public ConfirmEmailEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods ConfirmEmailEndpoint_ReturnsStatus500_WithInvalidRequest() [Fact] public Task ConfirmEmailEndpoint_ReturnsStatus500_WithInvalidRequest() Returns Task ConfirmEmailEndpoint_ReturnsStatus_200OKWithValidRequest() [Fact] public Task ConfirmEmailEndpoint_ReturnsStatus_200OKWithValidRequest() Returns Task ConfirmEmailEndpoint_ReturnsStatus_404WhenUserIsNotFound() [Fact] public Task ConfirmEmailEndpoint_ReturnsStatus_404WhenUserIsNotFound() Returns Task ConfirmEmailEndpoint_ReturnsStatus_500WhenUserIsNotFound() [Fact] public Task ConfirmEmailEndpoint_ReturnsStatus_500WhenUserIsNotFound() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.DeleteAccountEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.DeleteAccountEndpointTests.html",
    "title": "Class DeleteAccountEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class DeleteAccountEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class DeleteAccountEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object DeleteAccountEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteAccountEndpointTests(WebApplicationFactory<Program>) public DeleteAccountEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods DeleteAccountEndpoint_Returns204_WhenAccountIsDeleted() [Fact] public Task DeleteAccountEndpoint_Returns204_WhenAccountIsDeleted() Returns Task DeleteAccountEndpoint_Returns401_WhenUserIsUnauthorized() [Fact] public Task DeleteAccountEndpoint_Returns401_WhenUserIsUnauthorized() Returns Task DeleteAccountEndpoint_Returns500_WhenExceptionIsThrown() [Fact] public Task DeleteAccountEndpoint_Returns500_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ForgotPasswordEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ForgotPasswordEndpointTests.html",
    "title": "Class ForgotPasswordEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class ForgotPasswordEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class ForgotPasswordEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object ForgotPasswordEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ForgotPasswordEndpointTests(WebApplicationFactory<Program>) public ForgotPasswordEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods ForgotPasswordEndpoint_Returns204NoContent_WhenRequestIsValid() [Fact] public Task ForgotPasswordEndpoint_Returns204NoContent_WhenRequestIsValid() Returns Task ForgotPasswordEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Fact] public Task ForgotPasswordEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.LogoutEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.LogoutEndpointTests.html",
    "title": "Class LogoutEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class LogoutEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class LogoutEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object LogoutEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogoutEndpointTests(WebApplicationFactory<Program>) public LogoutEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods LogoutEndpoint_Returns204NoContent_WhenUserLogsOutSuccessfully() [Fact] public Task LogoutEndpoint_Returns204NoContent_WhenUserLogsOutSuccessfully() Returns Task LogoutEndpoint_Returns401Unauthorized_WhenNotLoggedIn() [Fact] public Task LogoutEndpoint_Returns401Unauthorized_WhenNotLoggedIn() Returns Task LogoutEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Fact] public Task LogoutEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RefreshEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RefreshEndpointTests.html",
    "title": "Class RefreshEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class RefreshEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class RefreshEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object RefreshEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RefreshEndpointTests(WebApplicationFactory<Program>) public RefreshEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods RefreshEndpoint_Returns401_WhenInvalidRefreshTokenIsUsed() [Fact] public Task RefreshEndpoint_Returns401_WhenInvalidRefreshTokenIsUsed() Returns Task RefreshEndpoint_Returns401_WhenInvalidTokenIsUsed() [Fact] public Task RefreshEndpoint_Returns401_WhenInvalidTokenIsUsed() Returns Task RefreshEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Fact] public Task RefreshEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RegisterEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.RegisterEndpointTests.html",
    "title": "Class RegisterEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class RegisterEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class RegisterEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object RegisterEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterEndpointTests(WebApplicationFactory<Program>) public RegisterEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods RegisterEndpoint_Returns201Created_WhenUserIsCreated() [Fact] public Task RegisterEndpoint_Returns201Created_WhenUserIsCreated() Returns Task RegisterEndpoint_Returns409Conflict_WhenUserAlreadyExists() [Fact] public Task RegisterEndpoint_Returns409Conflict_WhenUserAlreadyExists() Returns Task RegisterEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() [Fact] public Task RegisterEndpoint_Returns500InternalServerError_WhenExceptionIsThrown() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ResetPasswordEndpointTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.ResetPasswordEndpointTests.html",
    "title": "Class ResetPasswordEndpointTests | ChristopherBriddock.Identity",
    "keywords": "Class ResetPasswordEndpointTests Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class ResetPasswordEndpointTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object ResetPasswordEndpointTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResetPasswordEndpointTests(WebApplicationFactory<Program>) public ResetPasswordEndpointTests(WebApplicationFactory<Program> webApplicationFactory) Parameters webApplicationFactory WebApplicationFactory<Program> Methods ResetEndpoint_ReturnsStatus204_WhenResetIsSuccessful() [Fact] public void ResetEndpoint_ReturnsStatus204_WhenResetIsSuccessful() ResetEndpoint_ReturnsStatus400_WhenUserIsNotConfirmed() [Fact] public void ResetEndpoint_ReturnsStatus400_WhenUserIsNotConfirmed() ResetEndpoint_ReturnsStatus500_WhenExceptionIsThrown() [Fact] public void ResetEndpoint_ReturnsStatus500_WhenExceptionIsThrown()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.IntegrationTests.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Tests.IntegrationTests Classes AuthoriseEndpointTests ConfirmEmailEndpointTests DeleteAccountEndpointTests ForgotPasswordEndpointTests LogoutEndpointTests RefreshEndpointTests RegisterEndpointTests ResetPasswordEndpointTests"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.JsonWebTokenProviderMock.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.JsonWebTokenProviderMock.html",
    "title": "Class JsonWebTokenProviderMock | ChristopherBriddock.Identity",
    "keywords": "Class JsonWebTokenProviderMock Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Assembly ChristopherBriddock.Service.Identity.Tests.dll public class JsonWebTokenProviderMock : Mock<IJsonWebTokenProvider>, IFluentInterface, IMock<IJsonWebTokenProvider> Inheritance object Mock Mock<IJsonWebTokenProvider> JsonWebTokenProviderMock Implements IFluentInterface IMock<IJsonWebTokenProvider> Inherited Members Mock<IJsonWebTokenProvider>.ToString() Mock<IJsonWebTokenProvider>.OnGetObject() Mock<IJsonWebTokenProvider>.As<TInterface>() Mock<IJsonWebTokenProvider>.Setup(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Setup<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.SetupGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.SetupSet<TProperty>(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupSet(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupAdd(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupRemove(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupProperty<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.SetupProperty<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, TProperty) Mock<IJsonWebTokenProvider>.SetupAllProperties() Mock<IJsonWebTokenProvider>.SetupSequence<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.SetupSequence(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.When(Func<bool>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Times) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Func<Times>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, string) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Times, string) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Func<Times>, string) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Times) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Func<Times>) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, string) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Times, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Times) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Times, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyNoOtherCalls() Mock<IJsonWebTokenProvider>.Raise(Action<IJsonWebTokenProvider>, EventArgs) Mock<IJsonWebTokenProvider>.Raise(Action<IJsonWebTokenProvider>, params object[]) Mock<IJsonWebTokenProvider>.RaiseAsync(Action<IJsonWebTokenProvider>, params object[]) Mock<IJsonWebTokenProvider>.Expect(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Expect<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.ExpectGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.ExpectSet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.ExpectSet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, TProperty) Mock<IJsonWebTokenProvider>.Behavior Mock<IJsonWebTokenProvider>.CallBase Mock<IJsonWebTokenProvider>.DefaultValueProvider Mock<IJsonWebTokenProvider>.Object Mock<IJsonWebTokenProvider>.Name Mock<IJsonWebTokenProvider>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public JsonWebTokenProviderMock Mock() Returns JsonWebTokenProviderMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.Mocks.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.Mocks.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Tests.Mocks | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Tests.Mocks Classes JsonWebTokenProviderMock"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.ConfigureJwtBearerOptionsTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.ConfigureJwtBearerOptionsTests.html",
    "title": "Class ConfigureJwtBearerOptionsTests | ChristopherBriddock.Identity",
    "keywords": "Class ConfigureJwtBearerOptionsTests Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class ConfigureJwtBearerOptionsTests Inheritance object ConfigureJwtBearerOptionsTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConfigureJwtBearerOptionsTests() public ConfigureJwtBearerOptionsTests() Fields _sut public JwtBearerOptions _sut Field Value JwtBearerOptions Methods Configure_Should_Set_Audience_Correctly() [Fact] public void Configure_Should_Set_Audience_Correctly() Configure_Should_Set_Issuer_Correctly() [Fact] public void Configure_Should_Set_Issuer_Correctly() Configure_Should_Set_Secret_Correctly() [Fact] public void Configure_Should_Set_Secret_Correctly()"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.EmailPublisherTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.EmailPublisherTests.html",
    "title": "Class EmailPublisherTests | ChristopherBriddock.Identity",
    "keywords": "Class EmailPublisherTests Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class EmailPublisherTests Inheritance object EmailPublisherTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PublishIsSuccessfulWithCorrectMessage() [Fact] public Task PublishIsSuccessfulWithCorrectMessage() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.JsonWebTokenProviderTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.JsonWebTokenProviderTests.html",
    "title": "Class JsonWebTokenProviderTests | ChristopherBriddock.Identity",
    "keywords": "Class JsonWebTokenProviderTests Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests Assembly ChristopherBriddock.Service.Identity.Tests.dll public class JsonWebTokenProviderTests Inheritance object JsonWebTokenProviderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonWebTokenProviderTests() public JsonWebTokenProviderTests() Methods TryCreateTokenAsync_ShouldCreateToken_WhenValidParametersAreProvided() [Fact] public Task TryCreateTokenAsync_ShouldCreateToken_WhenValidParametersAreProvided() Returns Task TryValidateTokenAsync_ShouldFail_WhenInvalidTokenIsProvided() [Fact] public Task TryValidateTokenAsync_ShouldFail_WhenInvalidTokenIsProvided() Returns Task TryValidateTokenAsync_ShouldValidateToken_WhenValidTokenIsProvided() [Fact] public Task TryValidateTokenAsync_ShouldValidateToken_WhenValidTokenIsProvided() Returns Task"
  },
  "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.html": {
    "href": "api/ChristopherBriddock.Service.Identity.Tests.UnitTests.html",
    "title": "Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity.Tests.UnitTests Classes ConfigureJwtBearerOptionsTests EmailPublisherTests JsonWebTokenProviderTests"
  },
  "api/ChristopherBriddock.Service.Identity.html": {
    "href": "api/ChristopherBriddock.Service.Identity.html",
    "title": "Namespace ChristopherBriddock.Service.Identity | ChristopherBriddock.Identity",
    "keywords": "Namespace ChristopherBriddock.Service.Identity Classes Program The entry point for the Web Application."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the homepage | ChristopherBriddock.Identity",
    "keywords": "This is the homepage Refer to API for the documentation."
  }
}